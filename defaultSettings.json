{
	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// 
	//  - smart: Uses the default diffing algorithm.
	//  - experimental: Uses an experimental diffing algorithm.
	"diffEditor.diffAlgorithm": "smart",

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// When enabled, the diff editor shows arrows in its glyph margin to revert changes.
	"diffEditor.renderMarginRevertIcon": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 10,

	// Controls whether the editor should run in a mode where it is optimized for screen readers.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
	"editor.bracketPairColorization.enabled": true,

	// Controls whether each bracket type has its own independent color pool.
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// Code action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Enable/disable showing group headers in the code action menu.
	"editor.codeActionWidget.showHeaders": true,

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to `0`, 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default folding range provider which takes precedence over all other folding range provider. Must be the identifier of an extension contributing a folding range provider.
	//  - null: All active folding range providers
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - Wscats.eno: 🚀Easy to compile ts, tsx, scss, less, stylus, jade, pug and es6+ on save without using a build task.
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - ms-python.isort: Import Organization support for python files using `isort`.
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - BracketPairColorDLW.bracket-pair-color-dlw: Quickly 'Bracket Pair Color DLW' setting with a simple command
	//  - twxs.cmake: CMake langage support for Visual Studio Code
	//  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
	//  - jchannon.csharpextensions: C# IDE Extensions for VSCode
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - k--kato.docomment: Generate C# XML documentation comments for ///
	//  - docsmsft.docs-images: Docs Images Extension
	//  - cschlosser.doxdocgen: Let me generate Doxygen documentation from your source code for you.
	//  - vscode.emmet: Emmet support for VS Code
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - stxr.iconfont-preview: preview iconfont file in vscode
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.js-debug-nightly: An extension for debugging Node.js programs and Chrome.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - manuth.markdown-converter: A markdown-converter for vscode
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - tht13.python: Python language extension for vscode
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode.remote-explorer: View remote machines for Remote - SSH and Remote Server
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the WSL extension.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - SonarSource.sonarlint-vscode: SonarLint is an IDE extension that helps you detect and fix quality issues as you write code in C, C++, Java, JavaScript, PHP, Python, HTML and TypeScript.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	//  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
	//  - ms-vsonline.vsonline: Intelligent productivity and collaboration, from anywhere, powered by the cloud.
	"editor.defaultFoldingRangeProvider": null,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - Wscats.eno: 🚀Easy to compile ts, tsx, scss, less, stylus, jade, pug and es6+ on save without using a build task.
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - ms-python.isort: Import Organization support for python files using `isort`.
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - BracketPairColorDLW.bracket-pair-color-dlw: Quickly 'Bracket Pair Color DLW' setting with a simple command
	//  - twxs.cmake: CMake langage support for Visual Studio Code
	//  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
	//  - jchannon.csharpextensions: C# IDE Extensions for VSCode
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - k--kato.docomment: Generate C# XML documentation comments for ///
	//  - docsmsft.docs-images: Docs Images Extension
	//  - cschlosser.doxdocgen: Let me generate Doxygen documentation from your source code for you.
	//  - vscode.emmet: Emmet support for VS Code
	//  - dsznajder.es7-react-js-snippets: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - stxr.iconfont-preview: preview iconfont file in vscode
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.js-debug-nightly: An extension for debugging Node.js programs and Chrome.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - manuth.markdown-converter: A markdown-converter for vscode
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - tht13.python: Python language extension for vscode
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode.remote-explorer: View remote machines for Remote - SSH and Remote Server
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the WSL extension.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - SonarSource.sonarlint-vscode: SonarLint is an IDE extension that helps you detect and fix quality issues as you write code in C, C++, Java, JavaScript, PHP, Python, HTML and TypeScript.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
	//  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	//  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
	//  - ms-vsonline.vsonline: Intelligent productivity and collaboration, from anywhere, powered by the cloud.
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).
	"editor.dropIntoEditor.enabled": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Enable/disable running edits from extensions on paste.
	"editor.experimental.pasteActions.enabled": false,

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on Find in Selection automatically.
	//  - never: Never turn on Find in Selection automatically (default).
	//  - always: Always turn on Find in Selection automatically.
	//  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	//  - never: Never seed search string from the editor selection.
	//  - always: Always seed search string from the editor selection, including word at cursor position.
	//  - selection: Only seed search string from the editor selection.
	"editor.find.seedSearchStringFromSelection": "always",

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls whether the editor automatically collapses import ranges.
	"editor.foldingImportsByDefault": false,

	// The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
	"editor.foldingMaximumRegions": 5000,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 14,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	//  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	//  - true: Enables bracket pair guides.
	//  - active: Enables bracket pair guides only for the active bracket pair.
	//  - false: Disables bracket pair guides.
	"editor.guides.bracketPairs": false,

	// Controls whether horizontal bracket pair guides are enabled or not.
	//  - true: Enables horizontal guides as addition to vertical bracket pair guides.
	//  - active: Enables horizontal guides only for the active bracket pair.
	//  - false: Disables horizontal bracket pair guides.
	"editor.guides.bracketPairsHorizontal": "active",

	// Controls whether the editor should highlight the active bracket pair.
	"editor.guides.highlightActiveBracketPair": true,

	// Controls whether the editor should highlight the active indent guide.
	//  - true: Highlights the active indent guide.
	//  - always: Highlights the active indent guide even if bracket guides are highlighted.
	//  - false: Do not highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Prefer showing hovers above the line, if there's space.
	"editor.hover.above": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// Enables the inlay hints in the editor.
	//  - on: Inlay hints are enabled
	//  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Alt
	//  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Alt
	//  - off: Inlay hints are disabled
	"editor.inlayHints.enabled": "on",

	// Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
	"editor.inlayHints.fontFamily": "",

	// Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
	"editor.inlayHints.fontSize": 0,

	// Enables the padding around the inlay hints in the editor.
	"editor.inlayHints.padding": false,

	// Controls whether to automatically show inline suggestions in the editor.
	"editor.inlineSuggest.enabled": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Defines the bracket symbols that increase or decrease the indentation.
	"editor.language.brackets": null,

	// Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
	"editor.language.colorizedBracketPairs": null,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the code action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. 
	//  - Use 0 to automatically compute the line height from the font size.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is hidden automatically.
	"editor.minimap.autohide": false,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters.
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": true,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the visibility of the horizontal scrollbar.
	//  - auto: The horizontal scrollbar will be visible only when necessary.
	//  - visible: The horizontal scrollbar will always be visible.
	//  - hidden: The horizontal scrollbar will always be hidden.
	"editor.scrollbar.horizontal": "auto",

	// The height of the horizontal scrollbar.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Controls whether clicks scroll by page or jump to click position.
	"editor.scrollbar.scrollByPage": false,

	// Controls the visibility of the vertical scrollbar.
	//  - auto: The vertical scrollbar will be visible only when necessary.
	//  - visible: The vertical scrollbar will always be visible.
	//  - hidden: The vertical scrollbar will always be hidden.
	"editor.scrollbar.vertical": "auto",

	// The width of the vertical scrollbar.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 4,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls if surround-with-snippets or file template snippets show as code actions.
	"editor.snippets.codeActions.enabled": true,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Shows the nested current scopes during the scroll at the top of the editor.
	"editor.stickyScroll.enabled": false,

	// Defines the maximum number of sticky lines to show.
	"editor.stickyScroll.maxLineCount": 5,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// When enabled IntelliSense filtering requires that the first character matches on a word start, e.g `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
	"editor.suggest.matchOnWordStartOnly": true,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether to preview the suggestion outcome in the editor.
	"editor.suggest.preview": false,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `deprecated`-suggestions.
	"editor.suggest.showDeprecated": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "first",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Defines allowed characters that are not being highlighted.
	"editor.unicodeHighlight.allowedCharacters": {},

	// Unicode characters that are common in allowed locales are not being highlighted.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// Controls whether characters in comments should also be subject to unicode highlighting.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// Controls whether characters in strings should also be subject to unicode highlighting.
	"editor.unicodeHighlight.includeStrings": true,

	// Controls whether characters that just reserve space or have no width at all are highlighted.
	"editor.unicodeHighlight.invisibleCharacters": true,

	// Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Controls from which documents word based completions are computed.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the Source Control view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the Source Control view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls the default Source Control repository changes sort order when viewed as a list.
	//  - name: Sort the repository changes by file name.
	//  - path: Sort the repository changes by path.
	//  - status: Sort the repository changes by Source Control status.
	"scm.defaultViewSortKey": "path",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls whether a pattern is used for the diff decorations in gutter.
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
	//  - true: Ignore leading and trailing whitespace.
	//  - false: Do not ignore leading and trailing whitespace.
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls the sort order of the repositories in the source control repositories view.
	//  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
	//  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
	//  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
	"scm.repositories.sortOrder": "discovery time",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the Source Control view.
	"scm.showActionButton": true,

	// Controls when the restricted mode banner is shown.
	//  - always: Show the banner every time an untrusted workspace is open.
	//  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
	//  - never: Do not show the banner when an untrusted workspace is open.
	"security.workspace.trust.banner": "untilDismissed",

	// Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
	"security.workspace.trust.emptyWindow": true,

	// Controls whether or not workspace trust is enabled within VS Code.
	"security.workspace.trust.enabled": true,

	// Controls when the startup prompt to trust a workspace is shown.
	//  - always: Ask for trust every time an untrusted workspace is opened.
	//  - once: Ask for trust the first time an untrusted workspace is opened.
	//  - never: Do not ask for trust when an untrusted workspace is opened.
	"security.workspace.trust.startupPrompt": "once",

	// Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
	//  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
	//  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
	//  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Controls the behavior of clicking an activity bar icon in the workbench.
	//  - toggle: Hide the side bar if the clicked item is already visible.
	//  - focus: Focus side bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Default Dark+",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editorinputs.searchEditorInput": false,
		"vscode-interactive-input": false,
		"interactive": false,
		"terminalEditor": true,
		"vscode.markdown.preview.editor": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"ttf.preview": false,
		"java.formatterSettingsEditor": false,
		"jupyter-notebook": false,
		"mainThreadWebview-markdown.preview": false
	},

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// The default editor for files detected as binary. If undefined the user will be presented with a picker.
	"workbench.editor.defaultBinaryEditor": "",

	// Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.highlightModifiedTabs": false,

	// Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
	"workbench.editor.historyBasedLanguageDetection": true,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
	"workbench.editor.languageDetection": true,

	// When enabled, shows a status bar quick fix when the editor language doesn't match detected content language.
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
	"workbench.editor.limit.excludeDirty": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
	//  - default: Navigate across all opened editors and editor groups.
	//  - editorGroup: Navigate only in editors of the active editor group.
	//  - editor: Navigate only in the active editor.
	"workbench.editor.navigationScope": "default",

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// When enabled, a language detection model that takes into account editor history will be given higher precedence.
	"workbench.editor.preferHistoryBasedLanguageDetection": true,

	// Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.scrollToSwitchTabs": false,

	// Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
	"workbench.editor.sharedViewState": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	//  - vertical: Editors are positioned from top to bottom.
	//  - horizontal: Editors are positioned from left to right.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the sizing of editor groups when splitting them.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "distribute",

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls if the untitled text hint should be visible in the editor.
	"workbench.editor.untitled.hint": "text",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "content",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.wrapTabs": false,

	// Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
	"workbench.editorAssociations": {},

	// Controls whether to automatically resume an available edit session for the current workspace.
	//  - onReload: Automatically resume available edit session on window reload.
	//  - off: Never attempt to resume an edit session.
	"workbench.editSessions.autoResume": "onReload",

	// Controls whether to prompt the user to store edit sessions when using Continue Working On.
	//  - prompt: Prompt the user to sign in to store edit sessions with Continue Working On.
	//  - off: Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.
	"workbench.editSessions.continueOn": "prompt",

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// This setting is deprecated in favor of `workbench.editSessions.autoResume`.
	// 
	//  - onReload: Automatically resume available edit session on window reload.
	//  - off: Never attempt to resume an edit session.
	"workbench.experimental.editSessions.autoResume": "onReload",

	// Controls whether to automatically store an available edit session for the current workspace.
	//  - onShutdown: Automatically store current edit session on window close.
	//  - off: Never attempt to automatically store an edit session.
	"workbench.experimental.editSessions.autoStore": "off",

	// This setting is deprecated in favor of `workbench.experimental.continueOn`.
	// Controls whether to prompt the user to store edit sessions when using Continue Working On.
	//  - prompt: Prompt the user to sign in to store edit sessions with Continue Working On.
	//  - off: Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.
	"workbench.experimental.editSessions.continueOn": "prompt",

	// This setting is deprecated as Edit Sessions are no longer experimental. Please see `workbench.editSessions.autoResume#` and `#workbench.editSessions.continueOn` for configuring behavior related to Edit Sessions.
	// 
	"workbench.experimental.editSessions.enabled": true,

	// Controls whether to surface edit sessions which partially match the current session.
	"workbench.experimental.editSessions.partialMatches.enabled": false,

	// This setting has been deprecated in favor of `workbench.layoutControl.enabled`
	// Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
	"workbench.experimental.layoutControl.enabled": false,

	// This setting has been deprecated in favor of `workbench.layoutControl.type`
	// Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
	//  - menu: Shows a single button with a dropdown of layout options.
	//  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
	//  - both: Shows both the dropdown and toggle buttons.
	"workbench.experimental.layoutControl.type": "both",

	// Controls whether to enable the Settings Profiles preview feature.
	"workbench.experimental.settingsProfiles.enabled": false,

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",

	// Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
	"workbench.layoutControl.enabled": true,

	// Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
	//  - menu: Shows a single button with a dropdown of layout options.
	//  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
	//  - both: Shows both the dropdown and toggle buttons.
	"workbench.layoutControl.type": "both",

	// Controls the default find mode for lists and trees in the workbench.
	//  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter elements when searching.
	"workbench.list.defaultFindMode": "highlight",

	// Scrolling speed multiplier when pressing `Alt`.
	"workbench.list.fastScrollSensitivity": 5,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Please use 'workbench.list.defaultFindMode' instead.
	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.enabled": true,

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.exclude": {},

	// Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
	"workbench.localHistory.maxFileEntries": 50,

	// Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.maxFileSize": 256,

	// Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.mergeWindow": 10,

	// Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it. The panel will open un-maximized.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Specifies the preferred color theme used in high contrast dark mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the preferred color theme used in high contrast light mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Specifies the product icon theme used.
	//  - Default: Default
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls whether the workbench should render with fewer animations.
	//  - on: Always render with reduced motion.
	//  - off: Do not render with reduced motion
	//  - auto: Render with reduced motion based on OS configuration.
	"workbench.reduceMotion": "auto",

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// When enabled, the get started page has additional links to video tutorials.
	"workbench.welcomePage.experimental.videoTutorials": "off",

	// Deprecated, use the global `workbench.reduceMotion`.
	// When enabled, reduce motion in welcome page.
	"workbench.welcomePage.preferReducedMotion": false,

	// When enabled, an extension's walkthrough will open upon install of the extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`
	"window.autoDetectHighContrast": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Show command launcher together with the window title. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.commandCenter": false,

	// Controls whether to show a confirmation dialog before closing the window or quitting the application.
	//  - always: Always ask for confirmation.
	//  - keyboardOnly: Only ask for confirmation if a keybinding was used.
	//  - never: Never explicitly ask for confirmation.
	"window.confirmBeforeClose": "never",

	// Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
	"window.customMenuBarAltFocus": true,

	// Adjust the appearance of dialog windows.
	"window.dialogStyle": "native",

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
	"window.enableMenuBarMnemonics": true,

	// Experimental: When enabled, the window will have sandbox mode enabled via Electron API.
	"window.experimental.useSandbox": false,

	// Use window controls provided by the platform instead of our HTML-based window controls. Changes require a full restart to apply.
	"window.experimental.windowControlsOverlay.enabled": false,

	// Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar.
	//  - classic: Menu is displayed at the top of the window and only hidden in full screen mode.
	//  - visible: Menu is always visible at the top of the window even in full screen mode.
	//  - toggle: Menu is hidden but can be displayed at the top of the window via the Alt key.
	//  - hidden: Menu is always hidden.
	//  - compact: Menu is displayed as a compact button in the side bar. This value is ignored when `window.titleBarStyle` is `native`.
	"window.menuBarVisibility": "classic",

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window when using a command line or file dialog.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "on",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: an indicator for when the active editor has unsaved changes.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " - ",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

	// Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
	"files.autoGuessEncoding": false,

	// Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
	//  - off: An editor with changes is never automatically saved.
	//  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
	//  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search-specific excludes.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Controls if files that were part of a refactoring are saved automatically
	"files.refactoring.autoSave": true,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example `build/output` or `*.js`) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
	"files.watcherInclude": [],

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls what is displayed in the keyboard overlay when showing shortcuts.
	//  - keys: Keys.
	//  - command: Command title.
	//  - commandWithGroup: Command title prefixed by its group.
	//  - commandAndKeys: Command title and keys.
	//  - commandWithGroupAndKeys: Command title and keys, with the command prefixed by its group.
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Only show keyboard shortcuts in screencast mode.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to zen mode if it was exited in zen mode.
	"zenMode.restore": true,

	// Controls whether notifications do not disturb mode should be enabled while in zen mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Controls whether the explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether the explorer should ask for confirmation when undoing.
	//  - verbose: Explorer will prompt before all undo operations.
	//  - default: Explorer will prompt before destructive undo operations.
	//  - light: Explorer will not prompt before undo operations when focused.
	"explorer.confirmUndo": "default",

	// The path separation character used when copying relative file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyRelativePathSeparator": "auto",

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
	"explorer.enableDragAndDrop": true,

	// Controls whether the explorer should support undoing file and folder operations.
	"explorer.enableUndo": true,

	// Controls whether entries in .gitignore should be parsed and excluded from the explorer. Similar to `files.exclude`.
	"explorer.excludeGitIgnore": false,

	// Controls whether the explorer should expand multi-root workspaces containing only one folder during initialization
	"explorer.expandSingleFolderWorkspaces": true,

	// Controls whether file nesting is enabled in the explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
	"explorer.fileNesting.enabled": false,

	// Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
	"explorer.fileNesting.expand": true,

	// Controls nesting of files in the explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
	// - `${capture}`: Matches the resolved value of the `*` from the parent pattern
	// - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
	// - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
	// - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
	// - `*`:  Matches any string, may only be used once per child pattern
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
	},

	// Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
	//  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file
	"explorer.incrementalNaming": "simple",

	// The minimum number of editor slots shown in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
	"explorer.openEditors.minVisible": 0,

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
	//  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// The maximum number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls the property-based sorting of files and folders in the explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
	//  - default: Files and folders are sorted by their names. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
	//  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before  files.
	//  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
	"explorer.sortOrder": "default",

	// Controls the lexicographic sorting of file and folder names in the Explorer.
	//  - default: Uppercase and lowercase names are mixed together.
	//  - upper: Uppercase names are grouped together before lowercase names.
	//  - lower: Lowercase names are grouped together before uppercase names.
	//  - unicode: Names are sorted in unicode order.
	"explorer.sortOrderLexicographicOptions": "default",

	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Controls whether search file decorations should use badges.
	"search.decorations.badges": true,

	// Controls whether search file decorations should use colors.
	"search.decorations.colors": true,

	// Controls the default search result view mode.
	//  - tree: Shows search results as a tree.
	//  - list: Shows search results as a list.
	"search.defaultViewMode": "list",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// This setting is deprecated. You can drag the search icon to a new location instead.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
	"search.maxResults": 20000,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor
	//  - view: Search in the search view, either in the panel or side bars.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double clicking a result in a search editor.
	//  - selectWord: Double clicking selects the word under the cursor.
	//  - goToLocation: Double clicking opens the result in the active editor group.
	//  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useParentIgnoreFiles": false,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Enable to download and install new VS Code versions in the background on Windows.
	"update.enableWindowsBackgroundUpdates": true,

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// This setting is deprecated in favor of `comments.openView`.
	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Controls when the comments view should open.
	//  - never: The comments view will never be opened.
	//  - file: The comments view will open when a file with comments is active.
	//  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
	"comments.openView": "firstFile",

	// Determines if relative time will be used in comment timestamps (ex. '1 day ago').
	"comments.useRelativeTime": true,

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Automatically show values for variables that are lazily resolved by the debugger, such as getters.
	"debug.autoExpandLazyVariables": false,

	// Controls whether to confirm when the window closes if there are active debug sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are debug sessions.
	"debug.confirmOnExit": "never",

	// Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Controls if the debug console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the debug console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the debug console.
	"debug.console.fontSize": 14,

	// Controls if the debug console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the debug console.
	"debug.console.wordWrap": true,

	// Show Source Code in Disassembly View.
	"debug.disassemblyView.showSourceCode": true,

	// Controls whether the editor should be focused when the debugger breaks.
	"debug.focusEditorOnBreak": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Show variable values inline in editor while debugging.
	//  - on: Always show variable values inline in editor while debugging.
	//  - off: Never show variable values inline in editor while debugging.
	//  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
	"debug.inlineValues": "auto",

	// Controls when the internal debug console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnDebugBreak",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug status bar should be visible.
	//  - never: Never show debug in status bar
	//  - always: Always show debug in status bar
	//  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
	"html.autoCreateQuotes": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// Keep all existing new lines when formatting.
	"json.format.keepLines": false,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Enable/disable JSON validation.
	"json.validate.enable": true,

	// Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
	"markdown.editor.drop.enabled": true,

	// Enable pasting files into a Markdown editor inserts Markdown links. Requires enabling `editor.experimental.pasteActions.enabled`.
	"markdown.experimental.editor.pasteLinks.enabled": true,

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Enable highlighting link occurrences in the current document.
	"markdown.occurrencesHighlight.enabled": false,

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Convert URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Enable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable path suggestions while writing links in Markdown files.
	"markdown.suggest.paths.enabled": true,

	// Enable debug logging for the Markdown extension.
	"markdown.trace.extension": "off",

	// Traces the communication between VS Code and the Markdown language server.
	"markdown.trace.server": "off",

	// Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
	//  - prompt: Prompt on each file move.
	//  - always: Always update links automatically.
	//  - never: Never try to update link and don't prompt.
	"markdown.updateLinksOnFileMove.enabled": "never",

	// Enable updating links when a directory is moved or renamed in the workspace.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,

	// Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],

	// Validate duplicated definitions in the current file.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",

	// Enable all error reporting in Markdown files.
	"markdown.validate.enabled": false,

	// Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fileLinks.enabled": "warning",

	// Validate the fragment part of links to headers in other files in Markdown files, for example `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

	// Validate fragment links to headers in the current Markdown file, for example `[link](#header)`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fragmentLinks.enabled": "warning",

	// Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
	"markdown.validate.ignoredLinks": [],

	// Validate reference links in Markdown files, for example `[link][ref]`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.referenceLinks.enabled": "warning",

	// Validate link definitions that are unused in the current file.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"javascript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"javascript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"javascript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
	"js/ts.implicitProjectConfig.module": "ESNext",

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": true,

	// Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
	"js/ts.implicitProjectConfig.target": "ES2020",

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"typescript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "auto",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"typescript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"typescript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions from TS Server.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace.
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",

	// Configure which watching strategies should be used to keep track of files and directories.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
	"testing.alwaysRevealTestOnStateChange": false,

	// Configures when the error peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	//  - never: Never automatically open.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Controls whether to automatically open the peek view during auto-run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
	"testing.autoRun.delay": 1000,

	// Controls which tests are automatically run.
	//  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
	//  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
	"testing.autoRun.mode": "all",

	// Controls the action to take when left-clicking on a test decoration in the gutter.
	//  - run: Run the test.
	//  - debug: Debug the test.
	//  - contextMenu: Open the context menu for more options.
	"testing.defaultGutterClickAction": "run",

	// Controls whether the running test should be followed in the test explorer view
	"testing.followRunningTest": true,

	// Controls whether test decorations are shown in the editor gutter.
	"testing.gutterEnabled": true,

	// Controls when the testing view should open.
	//  - neverOpen: Never automatically open the testing view
	//  - openOnTestStart: Open the testing view when tests start
	//  - openOnTestFailure: Open the testing view on any test failure
	"testing.openTesting": "openOnTestStart",

	// Control whether save all dirty editors before running a test.
	"testing.saveBeforeTest": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"css.format.braceStyle": "collapse",

	// Enable/disable default CSS formatter.
	"css.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
	"css.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"css.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"css.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"css.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"css.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"less.format.braceStyle": "collapse",

	// Enable/disable default LESS formatter.
	"less.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
	"less.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"less.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"less.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"less.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"less.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"scss.format.braceStyle": "collapse",

	// Enable/disable default SCSS formatter.
	"scss.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
	"scss.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"scss.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"scss.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"scss.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"scss.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
	//  - true: Download and install updates automatically for all extensions.
	//  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.
	//  - false: Extensions are not automatically updated.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// Configure an extension to execute in a different extension host process.
	"extensions.experimental.affinity": {},

	// When enabled, the extension host will be launched using the new UtilityProcess Electron API.
	"extensions.experimental.useUtilityProcess": false,

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
	"extensions.supportUntrustedWorkspaces": {},

	// Override the virtual workspaces support of an extension.
	"extensions.supportVirtualWorkspaces": {},

	// Enable web worker extension host.
	//  - true: The Web Worker Extension Host will always be launched.
	//  - false: The Web Worker Extension Host will never be launched.
	//  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
	"extensions.webWorker": "auto",

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// Controls whether code cells in the interactive window are collapsed by default.
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// When enabled notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Controls where the focus indicator is rendered, either along the cell borders or on the left gutter
	"notebook.cellFocusIndicator": "gutter",

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Whether the cell toolbar should appear on hover or click.
	"notebook.cellToolbarVisibility": "click",

	// Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
	"notebook.compactView": true,

	// Control whether outputs action should be rendered in the output toolbar.
	"notebook.consolidatedOutputButton": true,

	// Control whether extra actions are shown in a dropdown next to the run button.
	"notebook.consolidatedRunButton": false,

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// Control whether the notebook editor should allow moving cells through drag and drop.
	"notebook.dragAndDropEnabled": true,

	// Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
	"notebook.editorOptionsCustomizations": {},

	// Control whether to render a global toolbar inside the notebook editor.
	"notebook.globalToolbar": true,

	// Control whether the actions on the notebook toolbar should render label or not.
	"notebook.globalToolbarShowLabel": "always",

	// Control where the insert cell actions should appear.
	//  - betweenCells: A toolbar that appears on hover between cells.
	//  - notebookToolbar: The toolbar at the top of the notebook editor.
	//  - both: Both toolbars.
	//  - hidden: The insert actions don't appear anywhere.
	"notebook.insertToolbarLocation": "both",

	// Controls the display of line numbers in the cell editor.
	"notebook.lineNumbers": "off",

	// Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
	"notebook.markup.fontSize": 0,

	// When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// When enabled notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// Control how many lines of text in a text output is rendered.
	"notebook.output.textLineLimit": 30,

	// The font family for the output text for notebook cells. When set to empty, the `editor.fontFamily` is used.
	"notebook.outputFontFamily": "",

	// Font size for the output text for notebook cells. When set to `0`, `editor.fontSize` is used.
	"notebook.outputFontSize": 0,

	// Line height of the output text for notebook cells.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"notebook.outputLineHeight": 22,

	// Whether the cell status bar should be shown.
	//  - hidden: The cell Status bar is always hidden.
	//  - visible: The cell Status bar is always visible.
	//  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
	"notebook.showCellStatusBar": "visible",

	// Controls when the Markdown header folding arrow is shown.
	//  - always: The folding controls are always visible.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: The folding controls are visible only on mouseover.
	"notebook.showFoldingControls": "mouseover",

	// Whether to use separate undo/redo stack for each cell.
	"notebook.undoRedoPerCell": true,

	// When enabled slow renderers are automatically profiled
	"application.experimental.rendererProfiling": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// Controls whether the Interactive Window sessions/history should be restored across window reloads. Whether the state of controllers used in Interactive Windows is persisted across window reloads are controlled by extensions contributing controllers.
	"interactiveWindow.restore": false,

	// When opening a file from the explorer in a terminal, determines what kind of terminal will be launched
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.linux` (now deprecated) is set.
	"terminal.integrated.automationProfile.linux": null,

	// The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.osx` (now deprecated) is set.
	"terminal.integrated.automationProfile.osx": null,

	// The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
	"terminal.integrated.automationProfile.windows": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.linux`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.linux": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.osx`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.osx": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.windows`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.windows": null,

	// A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
	// 
	// Remarks:
	// 
	// - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
	// - The message includes escape sequences so the reply might not happen with styled text.
	// - Each reply can only happen once every second.
	// - Use `"\r"` in the reply to mean the enter key.
	// - To unset a default key, set the value to null.
	// - Restart VS Code if new don't apply.
	"terminal.integrated.autoReplies": {},

	// The number of milliseconds to show the bell within a terminal tab when triggered.
	"terminal.integrated.bellDuration": 1000,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.quickFix
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm when the window closes if there are active terminal sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are terminals.
	//  - hasChildProcesses: Confirm if there are any terminals that have child processes.
	"terminal.integrated.confirmOnExit": "never",

	// Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
	//  - never: Never confirm.
	//  - editor: Confirm if the terminal is in the editor.
	//  - panel: Confirm if the terminal is in the panel.
	//  - always: Confirm if the terminal is either in the editor or panel.
	"terminal.integrated.confirmOnKill": "editor",

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer
	"terminal.integrated.customGlyphs": true,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls where newly created terminals will appear.
	//  - editor: Create terminals in the editor
	//  - view: Create terminals in the terminal view
	"terminal.integrated.defaultLocation": "view",

	// The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
	"terminal.integrated.defaultProfile.linux": null,

	// The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
	"terminal.integrated.defaultProfile.osx": null,

	// The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
	//  - null: Automatically detect the default
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\bin\bash.exe
	// - args: ['--login']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\WINDOWS\System32\cmd.exe
	// - args: []
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug-nightly
	"terminal.integrated.defaultProfile.windows": null,

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled. This shows up as a visual bell next to the terminal's name.
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	"terminal.integrated.enableFileLinks": true,

	// Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:
	// 
	// - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
	// - The paste is handled by the shell's readline (in the case of pwsh)
	"terminal.integrated.enableMultiLinePasteWarning": true,

	// Persist terminal sessions/history for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 14,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Controls whether the terminal will leverage the GPU to do its rendering.
	//  - auto: Let VS Code detect which renderer will give the best experience.
	//  - on: Enable GPU acceleration within the terminal.
	//  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
	//  - canvas: Use the terminal's fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection.
	"terminal.integrated.gpuAcceleration": "auto",

	// A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
	//  - on: Always enabled
	//  - off: Always disabled
	//  - auto: Enabled only for remote workspaces
	"terminal.integrated.localEchoEnabled": "auto",

	// Local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
	// 
	// - 1: Do nothing and use the standard theme colors.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 4.5,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// When the terminal process must be shut down (eg. on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
	// 
	// Caveats:
	// 
	// - Restoring of the process current working directory depends on whether it is supported by the shell.
	// - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
	"terminal.integrated.persistentSessionScrollback": 100,

	// The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	//  - nothing: Do nothing and pass event to terminal.
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// Controls the maximum number of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.linux": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.osx": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.windows": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.linux": [],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.windows": [],

	// When shell integration is enabled, adds a decoration for each command.
	//  - both: Show decorations in the gutter (left) and overview ruler (right)
	//  - gutter: Show gutter decorations to the left of the terminal
	//  - overviewRuler: Show overview ruler decorations to the right of the terminal
	//  - never: Do not show decorations
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. 
	// 
	// Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
	// 
	// Supported shells:
	// 
	// - Linux/macOS: bash, pwsh, zsh
	//  - Windows: pwsh
	// 
	// This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
	// 
	//  Note that the script injection may not work if you have custom arguments defined in the terminal profile, a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `terminal.integrated.shellIntegrations.decorationsEnabled`
	"terminal.integrated.shellIntegration.enabled": true,

	// Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
	"terminal.integrated.shellIntegration.history": 100,

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Whether to show hovers for links in the terminal output.
	"terminal.integrated.showLinkHover": true,

	// Controls whether the terminal will scroll using an animation.
	"terminal.integrated.smoothScrolling": false,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// A theme color ID to associate with terminal icons by default.
	"terminal.integrated.tabs.defaultColor": null,

	// A codicon ID to associate with terminal icons by default.
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - drop-down-button: $(drop-down-button)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle: $(circle)
	//  - circle-outline: $(circle-outline)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - compare-changes: $(compare-changes)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-closed: $(issue-closed)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - debug-alt: $(debug-alt)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-filled: $(map-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Controls whether terminal tab statuses support animation (eg. in progress tasks).
	"terminal.integrated.tabs.enableAnimation": true,

	// Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
	"terminal.integrated.tabs.enabled": true,

	// Controls whether focusing the terminal of a tab happens on double or single click.
	//  - singleClick: Focus the terminal when clicking a terminal tab
	//  - doubleClick: Focus the terminal when double clicking a terminal tab
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Controls whether the terminal tabs view will hide under certain conditions.
	//  - never: Never hide the terminal tabs view
	//  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
	//  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
	//  - left: Show the terminal tabs view to the left of the terminal
	//  - right: Show the terminal tabs view to the right of the terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.tabs.title` and `terminal.integrated.tabs.title`.
	"terminal.integrated.tabs.separator": " - ",

	// Controls whether terminal split and kill buttons are displays next to the new terminal button.
	//  - always: Always show the actions
	//  - singleTerminal: Show the actions when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
	//  - always: Always show the active terminal
	//  - singleTerminal: Show the active terminal when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the active terminal
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.title": "${process}",

	// Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of unicode; this is an older version which should work better on older systems.
	//  - 11: Version 11 of unicode; this version provides better support on modern systems that use modern versions of unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// A string containing all characters to be considered word separators by the double click to select word feature.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// Enable automatic tasks in the folder - note that tasks won't run in an untrusted workspace.
	//  - on: Always
	//  - auto: Prompt for permission for each folder
	//  - off: Never
	"task.allowAutomaticTasks": "auto",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// On window reload, reconnect to tasks that have problem matchers.
	"task.reconnection": true,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Shows decorations at points of interest in the terminal buffer such as the first problem found via a watch task. Note that this will only take effect for future tasks. `terminal.integrated.shellIntegration.decorationsEnabled` will take precedence over this setting
	"task.showDecorations": true,

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// Controls the default view mode of the Problems view.
	"problems.defaultViewMode": "tree",

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Controls the order in which problems are navigated.
	//  - severity: Navigate problems ordered by severity
	//  - position: Navigate problems ordered by position
	"problems.sortOrder": "severity",

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Enable crash reports to be collected. This helps us improve stability. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=786907) about what we collect and our privacy statement.
	"telemetry.enableTelemetry": true,

	// 
	// Controls Visual Studio Code telemetry, first-party extension telemetry and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=786907). A full restart of the application is necessary for crash reporting changes to take effect.
	// 
	// &nbsp;
	// 
	// The following table outlines the data sent with each setting:
	// 
	// |       | Crash Reports | Error Telemetry | Usage Data |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
	// 
	//  - all: Sends usage data, errors, and crash reports.
	//  - error: Sends general error telemetry and crash reports.
	//  - crash: Sends OS level crash reports.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "all",

	// Controls whether outline items are collapsed or expanded.
	//  - alwaysCollapse: Collapse all items.
	//  - alwaysExpand: Expand all items.
	"outline.collapseItems": "alwaysExpand",

	// Render outline elements with icons.
	"outline.icons": true,

	// Use badges for errors and warnings on outline elements.
	"outline.problems.badges": true,

	// Use colors for errors and warnings on outline elements.
	"outline.problems.colors": true,

	// Show errors and warnings on outline elements.
	"outline.problems.enabled": true,

	// When enabled outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled outline shows `variable`-symbols.
	"outline.showVariables": true,

	// Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": false,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": null,

	// Configure settings to be overridden for the c language.
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for the cpp language.
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for the csharp language.
	"[csharp]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for the css language.
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the cuda-cpp language.
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for the dockercompose language.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Configure settings to be overridden for the dockerfile language.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for the git-commit language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for the git-rebase language.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for the go language.
	"[go]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for the handlebars language.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the html language.
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the java language.
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configure settings to be overridden for the javascript language.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for the json language.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the jsonc language.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the less language.
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the makefile language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for the markdown language.
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// Configure settings to be overridden for the plaintext language.
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// Configure settings to be overridden for the python language.
	"[python]":  {
		"editor.wordBasedSuggestions": false
	},

	// Configure settings to be overridden for the scss language.
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for the search-result language.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for the shellscript language.
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configure settings to be overridden for the yaml language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
	// 
	"audioCues.enabled": null,

	// Plays a sound when the active line has a breakpoint.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasBreakpoint": "auto",

	// Plays a sound when the active line has an error.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasError": "auto",

	// Plays a sound when the active line has a folded area that can be unfolded.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasFoldedArea": "auto",

	// Plays a sound when the active line has an inline suggestion.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasInlineSuggestion": "auto",

	// Plays a sound when the active line has a warning.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.lineHasWarning": "off",

	// Plays a sound when trying to read a line with inlay hints that has no inlay hints.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.noInlayHints": "auto",

	// Plays a sound when the debugger stopped on a breakpoint.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.onDebugBreak": "auto",

	// Plays a sound when a task completed.
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.taskCompleted": "auto",

	// Plays a sound when a task fails (non-zero exit code).
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.taskFailed": "auto",

	// Plays a sound when a terminal quick fixes are available
	//  - auto: Enable audio cue when a screen reader is attached.
	//  - on: Enable audio cue.
	//  - off: Disable audio cue.
	"audioCues.terminalQuickFix": "auto",

	// The volume of the audio cues in percent (0-100).
	"audioCues.volume": 70,

	// The name under which the remote tunnel access is registered. If not set, the host name is used.
	"remote.tunnels.access.hostNameOverride": "",

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
	"remote.autoForwardPorts": true,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	"remote.autoForwardPortsSource": "process",

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Specifies the local host name that will be used for port forwarding.
	"remote.localPortHost": "localhost",

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// 
	//  - smart: Uses the default diffing algorithm.
	//  - experimental: Uses an experimental diffing algorithm.
	"mergeEditor.diffAlgorithm": "experimental",

	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
	"emmet.useInlineCompletions": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Prefix used when creating a new branch.
	"git.branchPrefix": "",

	// List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
	"git.branchProtection": [],

	// Controls whether a prompt is being shown before changes are committed to a protected branch.
	//  - alwaysCommit: Always commit changes to the protected branch.
	//  - alwaysCommitToNewBranch: Always commit changes to a new branch.
	//  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
	"git.branchProtectionPrompt": "alwaysPrompt",

	// List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
	//  - adjectives: A random adjective
	//  - animals: A random animal name
	//  - colors: A random color name
	//  - numbers: A random number between 100 and 999
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// Controls whether a random name is generated when creating a new branch.
	"git.branchRandomName.enable": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,

	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Open the merge editor for files that are currently under conflict.
	"git.mergeEditor": false,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Controls whether to optimistically update the state of the Source Control view after running git commands.
	"git.optimisticUpdate": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Run a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'git push' after a successful commit.
	//  - sync: Run 'git pull' and 'git push' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
	"git.pullBeforeCheckout": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Remember the last git command that ran after a commit.
	"git.rememberPostCommitCommand": false,

	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether an action button is shown in the Source Control view.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalGitEditor": false,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls whether to show uncommitted changes in the Timeline view.
	"git.timeline.showUncommitted": false,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
	"git.useEditorAsCommitInput": true,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
	"git.useIntegratedAskPass": true,

	// Enable verbose output when `git.useEditorAsCommitInput` is enabled.
	"git.verboseCommit": false,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// Controls which protocol is used to clone a GitHub repository
	"github.gitProtocol": "https",

	// GitHub Enterprise Server URI
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
	"ipynb.pasteImagesAsAttachments.enabled": true,

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],

	// Display hover with 'Run' and 'Debug' commands for scripts.
	"npm.scriptHover": true,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// The prefix that is used for each comment line except for first and last.
	"doxdocgen.c.commentPrefix": " * ",

	// Smart text snippet for factory methods/functions.
	"doxdocgen.c.factoryMethodText": "Create a {name} object",

	// The first line of the comment that gets generated. If empty it won't get generated at all.
	"doxdocgen.c.firstLine": "/**",

	// Smart text snippet for getters.
	"doxdocgen.c.getterText": "Get the {name} object",

	// The last line of the comment that gets generated. If empty it won't get generated at all.
	"doxdocgen.c.lastLine": " */",

	// Smart text snippet for setters.
	"doxdocgen.c.setterText": "Set the {name} object",

	// Doxygen comment trigger. This character sequence triggers generation of Doxygen comments.
	"doxdocgen.c.triggerSequence": "/**",

	// Smart text snippet for constructors.
	"doxdocgen.cpp.ctorText": "Construct a new {name} object",

	// Smart text snippet for destructors.
	"doxdocgen.cpp.dtorText": "Destroy the {name} object",

	// The template of the template parameter Doxygen line(s) that are generated. If empty it won't get generated at all.
	"doxdocgen.cpp.tparamTemplate": "@tparam {param} ",

	// File copyright documentation tag.  Array of strings will be converted to one line per element. Can template `{year}`.
	"doxdocgen.file.copyrightTag": [
		"@copyright Copyright (c) {year}"
	],

	// Additional file documentation.  Array of strings will be converted to one line per element. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
	"doxdocgen.file.customTag": [],

	// The order to use for the file comment. Values can be used multiple times. Valid values are `file`, `author`, `brief`, `version`, `date`, `empty`, `copyright` and `custom`.
	"doxdocgen.file.fileOrder": [
		"file",
		"author",
		"brief",
		"version",
		"date",
		"empty",
		"copyright",
		"empty",
		"custom"
	],

	// The template for the file parameter in Doxygen.
	"doxdocgen.file.fileTemplate": "@file {name}",

	// Version number for the file.
	"doxdocgen.file.versionTag": "@version 0.1",

	// Set the e-mail address of the author.  Replaces `{email}`.
	"doxdocgen.generic.authorEmail": "you@domain.com",

	// Set the name of the author.  Replaces `{author}`.
	"doxdocgen.generic.authorName": "your name",

	// Set the style of the author tag and your name.  Can template `{author}` and `{email}`.
	"doxdocgen.generic.authorTag": "@author {author} ({email})",

	// If this is enabled, the documentation for a `bool` return value will be split into `true` and `false` entries.
	"doxdocgen.generic.boolReturnsTrueFalse": true,

	// The template of the brief Doxygen line that is generated. If empty it won't get generated at all.
	"doxdocgen.generic.briefTemplate": "@brief {text}",

	// Provide intellisense and snippet for doxygen commands
	"doxdocgen.generic.commandSuggestion": true,

	// Add `\` in doxygen command suggestion for better readbility (need to enable commandSuggestion)
	"doxdocgen.generic.commandSuggestionAddPrefix": false,

	// Custom tags to be added to the generic order. One tag per line will be added. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
	"doxdocgen.generic.customTags": [],

	// The format to use for the date.
	"doxdocgen.generic.dateFormat": "YYYY-MM-DD",

	// The template for the date parameter in Doxygen.
	"doxdocgen.generic.dateTemplate": "@date {date}",

	// Array of keywords that should be removed from the input prior to parsing.
	"doxdocgen.generic.filteredKeywords": [],

	// Decide if you want to get smart text for certain commands.
	"doxdocgen.generic.generateSmartText": true,

	// Whether include type information at return.
	"doxdocgen.generic.includeTypeAtReturn": true,

	// How many lines the plugin should look for to find the end of the declaration. Please be aware that setting this value too low could improve the speed of comment generation by a very slim margin but the plugin also may not correctly detect all declarations or definitions anymore.
	"doxdocgen.generic.linesToGet": 20,

	// The order to use for the comment generation. Values can be used multiple times. Valid values are `brief`, `empty`, `tparam`, `param`, `return`, `custom`, `author`, `date`, `version` and `copyright`.
	"doxdocgen.generic.order": [
		"brief",
		"empty",
		"tparam",
		"param",
		"return",
		"custom"
	],

	// The template of the param Doxygen line(s) that are generated. If empty it won't get generated at all.
	"doxdocgen.generic.paramTemplate": "@param {param} ",

	// The template of the return Doxygen line that is generated. If empty it won't get generated at all.
	"doxdocgen.generic.returnTemplate": "@return {type} ",

	// Decide if the values put into `{name}` should be split according to their casing.
	"doxdocgen.generic.splitCasingSmartText": true,

	// Substitute `{email}` with `git config --get user.email`.
	"doxdocgen.generic.useGitUserEmail": false,

	// Substitute `{author}` with `git config --get user.name`.
	"doxdocgen.generic.useGitUserName": false,

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// A special rules customization section for text cells in notebook documents.
	"eslint.notebooks.rules.customizations": [],

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// The maximum height of an image. When applying image compression, images taller than this will be resized appropriately.
	"docsImages.maxHeight": 0,

	// The maximum width of an image. When applying image compression, images wider than this will be resized appropriately.
	"docsImages.maxWidth": 1200,

	// Controls if snippets should add `import React from 'react';` at the top of components.
	// Use if you have React +17 and use jsx transform.
	"reactSnippets.settings.importReactOnTop": true,

	// defines the language scopes for which the snippets will be available.
	// Use comma separated values.
	// For example: `typescript,typescriptreact,javascript,javascriptreact`
	"reactSnippets.settings.languageScopes": "typescript,typescriptreact,javascript,javascriptreact",

	// [EXPERIMENTAL: MIGHT NOT WORK]: Integrate prettier settings with code generated from snippets.
	"reactSnippets.settings.prettierEnabled": false,

	// Controls if React components have typescript Props typing.
	"reactSnippets.settings.typescript": true,

	// Controls which prefix for typescript snippets should use for props/state.
	"reactSnippets.settings.typescriptPropsStatePrefix": "type",

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// If true, puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, enforces single attribute per line in HTML, Vue and JSX.
	"prettier.singleAttributePerLine": false,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// Whether to clear previous output before each run.
	"code-runner.clearPreviousOutput": false,

	// Set the custom command to run.
	"code-runner.customCommand": "echo Hello",

	// Set the working directory.
	"code-runner.cwd": "",

	// Set the default language to run.
	"code-runner.defaultLanguage": "",

	// Whether to enable AppInsights to track user telemetry data.
	"code-runner.enableAppInsights": true,

	// Set the executor of each language.
	"code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python -u",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"go": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run",
		"v": "v run",
		"sass": "sass --style expanded",
		"scss": "scss --style expanded",
		"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
		"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"sml": "cd $dir && sml $fileName"
	},

	// Set the executor of each file extension.
	"code-runner.executorMapByFileExtension": {
		".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
		".vbs": "cscript //Nologo",
		".scala": "scala",
		".jl": "julia",
		".cr": "crystal",
		".ml": "ocaml",
		".exs": "elixir",
		".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		".rkt": "racket",
		".scm": "csi -script",
		".ahk": "autohotkey",
		".au3": "autoit3",
		".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
		".kts": "kotlinc -script",
		".dart": "dart",
		".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		".hs": "runhaskell",
		".nim": "nim compile --verbosity:0 --hints:off --run",
		".csproj": "dotnet run --project",
		".fsproj": "dotnet run --project",
		".lisp": "sbcl --script",
		".kit": "kitc --run",
		".v": "v run",
		".vsh": "v run",
		".sass": "sass --style expanded",
		".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		".ring": "ring",
		".sml": "cd $dir && sml $fileName"
	},

	// Set the executor by glob.
	"code-runner.executorMapByGlob": {
		"pom.xml": "cd $dir && mvn clean package"
	},

	// Whether to use the directory of the file to be executed as the working directory.
	"code-runner.fileDirectoryAsCwd": false,

	// Whether to ignore selection to always run entire file.
	"code-runner.ignoreSelection": false,

	// Set the mapping of languageId to file extension.
	"code-runner.languageIdToFileExtensionMap": {
		"bat": ".bat",
		"powershell": ".ps1",
		"typescript": ".ts"
	},

	// Whether to preserve focus on code editor after code run is triggered.
	"code-runner.preserveFocus": true,

	// Whether to respect Shebang to run code.
	"code-runner.respectShebang": true,

	// Whether to run code in Integrated Terminal.
	"code-runner.runInTerminal": false,

	// Whether to save all files before running.
	"code-runner.saveAllFilesBeforeRun": false,

	// Whether to save the current file before running.
	"code-runner.saveFileBeforeRun": false,

	// Whether to show extra execution message like [Running] ... and [Done] ...
	"code-runner.showExecutionMessage": true,

	// Whether to show 'Run Code' command in editor context menu.
	"code-runner.showRunCommandInEditorContextMenu": true,

	// Whether to show 'Run Code' command in explorer context menu.
	"code-runner.showRunCommandInExplorerContextMenu": true,

	// Whether to show 'Run Code' icon in editor title menu.
	"code-runner.showRunIconInEditorTitleMenu": true,

	// Whether to show 'Stop code run' icon in the editor title menu when code is running.
	"code-runner.showStopIconInEditorTitleMenu": true,

	// Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
	"code-runner.temporaryFileName": "tempCodeRunnerFile",

	// For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
	"code-runner.terminalRoot": "",

	// Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open.
	"githubIssues.assignWhenWorking": true,

	// Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run.
	"githubIssues.createInsertFormat": "number",

	// Strings that will cause the 'Create issue from comment' code action to show.
	"githubIssues.createIssueTriggers": [
		"TODO",
		"todo",
		"BUG",
		"FIXME",
		"ISSUE",
		"HACK"
	],

	// Languages that the '#' character should not be used to trigger issue completion suggestions.
	"githubIssues.ignoreCompletionTrigger": [
		"coffeescript",
		"diff",
		"dockerfile",
		"dockercompose",
		"ignore",
		"ini",
		"julia",
		"makefile",
		"perl",
		"powershell",
		"python",
		"r",
		"ruby",
		"shellscript",
		"yaml"
	],

	// An array of milestones titles to never show issues from.
	"githubIssues.ignoreMilestones": [],

	// Languages that the '@' character should not be used to trigger user completion suggestions.
	"githubIssues.ignoreUserCompletionTrigger": [
		"python"
	],

	// Advanced settings for the name of the branch that is created when you start working on an issue. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters (https://git-scm.com/docs/git-check-ref-format) removed
	"githubIssues.issueBranchTitle": "${user}/issue${issueNumber}",

	// Sets the format of issue completions in the SCM inputbox. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository
	"githubIssues.issueCompletionFormatScm": "${issueTitle} ${issueNumberLabel}",

	// Controls whether completion suggestions are shown for issues.
	"githubIssues.issueCompletions.enabled": true,

	// Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The "default" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		},
		{
			"label": "Recent Issues",
			"query": "state:open repo:${owner}/${repository} sort:updated-desc"
		}
	],

	// Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`.
	//  - on: A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.
	//  - off: A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.
	//  - prompt: A prompt will show for setting the name of the branch that will be created and checked out.
	"githubIssues.useBranchForIssues": "on",

	// Controls whether completion suggestions are shown for users.
	"githubIssues.userCompletions.enabled": true,

	// Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} 
	// Fixes #${issueNumber}`
	"githubIssues.workingIssueFormatScm": "${issueTitle} \nFixes ${issueNumberLabel}",

	// All pull requests created with this extension will be assigned to this user. To assign to yourself, use the '${user}' variable.
	"githubPullRequests.assignCreated": "",

	// Controls whether comments are expanded when a document with comments is opened.
	//  - expandUnresolved: All unresolved comments will be expanded.
	//  - collapseAll: All comments will be collapsed
	"githubPullRequests.commentExpandState": "expandUnresolved",

	// Create a pull request when a branch is published.
	//  - never: Never create a pull request when a branch is published.
	//  - ask: Ask if you want to create a pull request when a branch is published.
	"githubPullRequests.createOnPublishBranch": "ask",

	// When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,

	// When true, the option to delete the remote will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectRemote": true,

	// The method to use when merging pull requests.
	"githubPullRequests.defaultMergeMethod": "merge",

	// The layout to use when displaying changed files list.
	"githubPullRequests.fileListLayout": "tree",

	// The layout to use when a pull request is checked out. Set to false to prevent layout changes.
	"githubPullRequests.focusedMode": "firstDiff",

	// Prevents branches that are associated with a pull request from being automatically detected. This will prevent review mode from being entered on these branches.
	"githubPullRequests.ignoredPullRequestBranches": [],

	// The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
	// By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
	"githubPullRequests.includeRemotes": "default",

	// Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
	"githubPullRequests.logLevel": "info",

	// If GitHub notifications should be shown to the user.
	"githubPullRequests.notifications": "off",

	// The default branch for a repository is set on github.com. With this setting, you can override that default with another branch.
	"githubPullRequests.overrideDefaultBranch": "",

	// The action to take after creating a pull request.
	//  - none: No action
	//  - openOverview: Open the overview page of the pull request
	"githubPullRequests.postCreate": "openOverview",

	// Pull changes from the remote when a PR branch is checked out locally. Changes are detected when the PR is manually refreshed and during periodic background updates.
	//  - prompt: Prompt to pull a PR branch when changes are detected in the PR.
	//  - never: Never pull a PR branch when changes are detected in the PR.
	//  - always: Always pull a PR branch when changes are detected in the PR. When `"git.autoStash": true` this will instead `prompt` to prevent unexpected file changes.
	"githubPullRequests.pullBranch": "prompt",

	// The description used when creating pull requests.
	//  - template: Use a pull request template and commit description, or just use the commit description if no templates were found
	//  - commit: Use the latest commit message only
	"githubPullRequests.pullRequestDescription": "template",

	// The pull request title now uses the same defaults as GitHub, and can be edited before create.
	// The title used when creating pull requests.
	//  - commit: Use the latest commit message
	//  - branch: Use the branch name
	//  - custom: Specify a custom title
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestTitle": "ask",

	// Push the "from" branch when creating a PR and the "from" branch is not available on the remote.
	//  - prompt: Prompt to push the branch when creating a PR and the "from" branch is not available on the remote.
	//  - always: Always push the branch when creating a PR and the "from" branch is not available on the remote.
	"githubPullRequests.pushBranch": "prompt",

	// Specifies what queries should be used in the GitHub Pull Requests tree. All queries are made against **the currently opened repos**. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	// List of remotes, by name, to fetch pull requests from.
	"githubPullRequests.remotes": [
		"origin",
		"upstream"
	],

	// This setting is deprecated. Views can now be dragged to any location.
	// When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
	"githubPullRequests.showInSCM": false,

	// Default handler for terminal links.
	//  - github: Create the pull request on GitHub
	//  - vscode: Create the pull request in VS Code
	//  - ask: Ask which method to use
	"githubPullRequests.terminalLinksHandler": "ask",

	// Choose which pull request states will use review mode. "Open" pull requests will always use review mode.
	"githubPullRequests.useReviewMode": {
		"merged": true,
		"closed": false
	},

	// Prefix for generated private member declarations
	"csharpextensions.privateMemberPrefix": "",

	// If true the document will be reformatted after codeactions are used.
	"csharpextensions.reFormatAfterChange": true,

	// Wether or not a ctor assignment of a property or variable should be prefixed with this.
	"csharpextensions.useThisForCtorAssignments": true,

	// Press the Enter key to activate a command.
	"docomment.activateOnEnter": false,

	// User-controllable options.
	"docomment.advanced": {},

	// Comments are single-line comments that start with three slashes (///) ("single"), or delimited comments that start with a slash and two stars (/**) ("delimited").
	"docomment.syntax": "single",

	// The insertion behavior to use for pictures based on their paths.
	"markdownConverter.Assets.PictureInsertion": {},

	// The insertion behavior to use for javascript files based on their paths.
	"markdownConverter.Assets.ScriptInsertion": {},

	// Javascript files, to include in the document and their corresponding insertion behavior.  
	// Files can be specified using file-paths or URIs.
	"markdownConverter.Assets.Scripts": {},

	// The insertion behavior to use for stylesheets based on their paths.
	"markdownConverter.Assets.StyleSheetInsertion": {},

	// Stylesheets to include in the document and their corresponding insertion behavior.  
	// Files can be specified using file-paths or URIs.
	"markdownConverter.Assets.StyleSheets": {},

	// A set of arguments to pass to chromium.
	// 
	// This feature might be useful if you want to pass arguments such as `--no-sandbox` to chromium.
	"markdownConverter.ChromiumArgs": [],

	// Either the path to the Chromium-installation to use or `""` for letting MarkdownConverter download a Chrome-installation.
	"markdownConverter.ChromiumExecutablePath": null,

	// The quality of converted JPEG-files.
	"markdownConverter.ConversionQuality": 100,

	// Either a single or a set of types to convert the markdown-file to.
	"markdownConverter.ConversionType": [
		"PDF"
	],

	// A set of names and and their associated custom date-format.  
	// See: <https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx>
	"markdownConverter.DateFormats": {},

	// The default format-pattern or name of a date-format to print dates.  
	// See: <https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx>
	"markdownConverter.DefaultDateFormat": "Default",

	// The pattern for creating a destination-path.
	// 
	// Following variables can be used inside this expression:
	// 
	// * `${workspaceFolder}`:  
	// Either the path to the `workspace` or the directory which contains the document.
	// * `${dirname}`:  
	// The relative path from the `${workspaceFolder}` to the directory which contains the document.
	// * `${basename}`:  
	// The name of the document-file without extension.
	// * `${extension}`:  
	// The file-extension of the destination-datatype.
	// * `${filename}`: 
	// The name of the document-file.
	"markdownConverter.DestinationPattern": "${workspaceFolder}/${dirname}/${basename}.${extension}",

	// The attributes of the document.  
	// They can be included into the document like this: `{{ AttributeName }}`
	"markdownConverter.Document.Attributes": {},

	// Allows you to disable the default styles.
	"markdownConverter.Document.DefaultStyles": true,

	// The content of the different sections of the footer.
	"markdownConverter.Document.FooterContent": {
		"Center": "<span class=\"pageNumber\"></span>/<span class=\"totalPages\"></span>"
	},

	// The content of the footer or the path to the footer-template.
	"markdownConverter.Document.FooterTemplate": "<div style=\"position: relative; margin-left: 1cm; margin-right: 1cm; width: 100%; \">\n    <div style=\"float: left; text-align: left; \">\n        {{{ Left }}}\n    </div>\n    <div style=\"position: absolute; left: 0; right: 0; text-align: center; \">\n        {{{ Center }}}\n    </div>\n    <div style=\"float: right; text-align: right; \">\n        {{{ Right }}}\n    </div>\n</div>",

	// The content of the different sections of the header.
	"markdownConverter.Document.HeaderContent": {
		"Left": "{{ Author }}",
		"Center": "{{ ChangeDate }}",
		"Right": "{{ Company }}"
	},

	// This option enables the rendering of headers and footers.
	// 
	// Note:
	// Script-tags are not supported inside the header and the footer.
	"markdownConverter.Document.HeaderFooterEnabled": true,

	// The content of the header or the path to the header-template.  
	// You can insert the page-number and the total amount of pages by using the CSS-classes `pageNumber` and `totalPages`.
	"markdownConverter.Document.HeaderTemplate": "<div style=\"position: relative; margin-left: 1cm; margin-right: 1cm; width: 100%; \">\n    <div style=\"float: left; text-align: left; \">\n        {{{ Left }}}\n    </div>\n    <div style=\"position: absolute; left: 0; right: 0; text-align: center; \">\n        {{{ Center }}}\n    </div>\n    <div style=\"float: right; text-align: right; \">\n        {{{ Right }}}\n    </div>\n</div>",

	// The highlight.js-style to use.
	"markdownConverter.Document.HighlightStyle": "Default",

	// The content of the metadata-section or the path to the metadata-template.
	"markdownConverter.Document.MetaTemplate": null,

	// The margin of the paper.
	"markdownConverter.Document.Paper.Margin": {},

	// The dimensions of the rendered document.  
	// Either the width and the height of the paper or a predefined format.
	"markdownConverter.Document.Paper.PaperFormat": {},

	// The path to the template of the document.
	// 
	// ***Note:***  
	//   - `{{{ meta }}}` is being replaced by the metadata-section of the document
	//   - `{{{ styles }}}`'s replaced by the css-styles
	//   - `{{{ content }}}`'s replaced by the body of the document.
	//   - `{{{ scripts }}}` is being replaced by javascript code.
	"markdownConverter.Document.Template": null,

	// `true` to convert the current file even if the language isn't set to Markdown; otherwise `false`.
	"markdownConverter.IgnoreLanguageMode": false,

	// The `locale` to print the date.
	// 
	// ***Note:***  
	// This option defaults to VSCode's locale.
	"markdownConverter.Locale": null,

	// The emoji-type to use.
	"markdownConverter.Parser.EmojiType": "GitHub",

	// `true` to use system-provided parser; otherwise `false`.
	"markdownConverter.Parser.SystemParserEnabled": true,

	// The css-class of the table of contents.
	"markdownConverter.Parser.Toc.Class": "markdown-converter-toc",

	// Enables the rendering of a table of contents using `markdown-it-table-of-contents`.
	"markdownConverter.Parser.Toc.Enabled": true,

	// The RegExp that is to be replaced by the table of contents.
	"markdownConverter.Parser.Toc.Indicator": "^\\[\\[\\s*toc\\s*\\]\\]",

	// The heading-levels to include into the table of contents.
	// 
	// ***Examples:***
	// `"2-6"`, `"1, 3, 5-"`.
	"markdownConverter.Parser.Toc.Levels": "1-6",

	// The list-type of the table of contents.
	// The list can either be numbered (`ol`) or not numbered (`ul`).
	"markdownConverter.Parser.Toc.ListType": "ul",

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Display inline parameter name hints
	"csharp.inlayHints.parameters.enabled": false,

	// Show hints for indexers
	"csharp.inlayHints.parameters.forIndexerParameters": false,

	// Show hints for literals
	"csharp.inlayHints.parameters.forLiteralParameters": false,

	// Show hints for 'new' expressions
	"csharp.inlayHints.parameters.forObjectCreationParameters": false,

	// Show hints for everything else
	"csharp.inlayHints.parameters.forOtherParameters": false,

	// Suppress hints when parameter names differ only by suffix
	"csharp.inlayHints.parameters.suppressForParametersThatDifferOnlyBySuffix": false,

	// Suppress hints when argument matches parameter name
	"csharp.inlayHints.parameters.suppressForParametersThatMatchArgumentName": false,

	// Suppress hints when parameter name matches the method's intent
	"csharp.inlayHints.parameters.suppressForParametersThatMatchMethodIntent": false,

	// Display inline type hints
	"csharp.inlayHints.types.enabled": false,

	// Show hints for implicit object creation
	"csharp.inlayHints.types.forImplicitObjectCreation": false,

	// Show hints for variables with inferred types
	"csharp.inlayHints.types.forImplicitVariableTypes": false,

	// Show hints for lambda parameter types
	"csharp.inlayHints.types.forLambdaParameterTypes": false,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,

	// Array of custom symbol names for which CodeLens should be disabled.
	"csharp.referencesCodeLens.filteredSymbols": [],

	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": true,

	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,

	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,

	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Specifies whether the run and debug test CodeLens should be shown.
	"csharp.testsCodeLens.enabled": true,

	// Options to use with the debugger when launching for unit test debugging.
	"csharp.unitTestDebuggingOptions": {},

	// Only run analyzers against open files when 'enableRoslynAnalyzers' is true
	"omnisharp.analyzeOpenDocumentsOnly": false,

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": "",

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// Paths to a local download of the .NET CLI to use for running any user code.
	"omnisharp.dotNetCliPaths": [],

	// Specified the path to a dotnet installation to use when "useModernNet" is set to true, instead of the default system one. This only influences the dotnet installation to use for hosting Omnisharp itself. Example: "/home/username/mycustomdotnetdirectory".
	"omnisharp.dotnetPath": "",

	// (EXPERIMENTAL) Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results.
	"omnisharp.enableAsyncCompletion": false,

	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,

	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution.
	"omnisharp.enableImportCompletion": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useModernNet" is set to false, instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": "",

	// Specifies whether 'using' directives should be grouped and sorted during document formatting.
	"omnisharp.organizeImportsOnFormat": false,

	// Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting "latest" is an opt-in into latest beta releases of OmniSharp.
	"omnisharp.path": "",

	// The exclude pattern used by OmniSharp to find all project files.
	"omnisharp.projectFilesExcludePattern": "**/node_modules/**,**/.git/**,**/bower_components/**",

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifies whether to include preview versions of the .NET SDK when determining which version to use for project loading. Applies when "useModernNet" is set to true.
	"omnisharp.sdkIncludePrereleases": true,

	// Specifies the path to a .NET SDK installation to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: /home/username/dotnet/sdks/6.0.300.
	"omnisharp.sdkPath": "",

	// Specifies the version of the .NET SDK to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: 6.0.300.
	"omnisharp.sdkVersion": "",

	// Path to the .runsettings file which should be used when running unit tests.
	"omnisharp.testRunSettings": "",

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Use OmniSharp build for .NET 6. This version _does not_ support non-SDK-style .NET Framework projects, including Unity. SDK-style Framework, .NET Core, and .NET 5+ projects should see significant performance improvements.
	"omnisharp.useModernNet": true,

	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,

	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,

	// Specifies whether to disable Razor language features.
	"razor.disabled": false,

	// Enable/disable default Razor formatter.
	"razor.format.enable": true,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": "",

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": "",

	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",

	// Arguments passed in. Each argument is a separate string in the array.
	"isort.args": [],

	// Controls whether to run `isort` and report import sort issues.
	"isort.check": false,

	// Defines where `isort` is imported from. This setting may be ignored if `isort.path` is set.
	//  - useBundled: Always use the bundled version of `isort`.
	//  - fromEnvironment: Use `isort` from environment, fallback to bundled version only if `isort` not available in the environment.
	"isort.importStrategy": "useBundled",

	// When set to a path to python executable, extension will use that to launch the server and any subprocess.
	"isort.interpreter": [],

	// The trace level the extension logs at, defaults to 'error'.
	//  - debug: Includes verbose logging intended for debugging purposes.
	//  - error: Only errors and always logged information.
	//  - info: Includes all messages that are not marked as verbose or debug.
	//  - off: Most logging is turned off, any information that is always logged might still be shown.
	//  - warn: Includes all messages in the error category and any additional warnings.
	"isort.logLevel": "error",

	// When set to a path to `isort` binary, extension will use that for linting. NOTE: Using this option may slowdown linting.
	"isort.path": [],

	// Mapping from severity of `isort` message type to severity shown in problem window.
	"isort.severity": {
		"W": "Warning",
		"E": "Hint"
	},

	// Controls when notifications are shown by this extension.
	//  - off: All notifications are turned off, any errors or warning are still available in the logs.
	//  - onError: Notifications are shown only in the case of an error.
	//  - onWarning: Notifications are shown for errors and warnings.
	//  - always: Notifications are show for anything that the server chooses to show.
	"isort.showNotifications": "off",

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Controls when to display information of selected interpreter in the status bar.
	//  - never: Never display information.
	//  - onPythonRelated: Only display information if Python-related files are opened.
	//  - always: Always display information.
	"python.interpreter.infoVisibility": "onPythonRelated",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8.
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// %python.linting.mypyCategorySeverity.note.description%.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle.
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle.
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Error/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// This setting will be removed soon. Use `isort.args` instead.
	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// This setting will be removed soon. Use `isort.path` instead.
	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// When launching a python terminal, whether to focus the cursor on the terminal.
	"python.terminal.focusAfterLaunch": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": false,

	// Offer user symbols in auto-import completions.
	"python.analysis.autoImportUserSymbols": false,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
	"python.analysis.exclude": [],

	// Allow using '.', '(' as commit characters when applicable.
	"python.analysis.extraCommitChars": true,

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// source fixes to run in fix all.
	"python.analysis.fixAll": [],

	// Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
	"python.analysis.ignore": [],

	// Defines the default format for import module.
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",

	// Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
	"python.analysis.include": [],

	// Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
	"python.analysis.indexing": true,

	// Enable/disable inlay hints for function return types:
	// ```python
	// def foo(x:int) ' -> int ':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,

	// Enable/disable inlay hints for variable types:
	// ```python
	// foo ' :list[str] ' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:
	// ```JSON
	// {"name": "package name (str)",
	//  "depth": "depth to scan (int)",
	//  "includeAllSymbols": "whether to include all symbols (bool)"}
	// 
	// ```
	// If `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  
	//   
	// Usage example: 
	// ```JSON
	// [
	// 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
	// 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
	// ]
	// 
	// ```
	// 
	"python.analysis.packageIndexDepths": [
		{
			"name": "sklearn",
			"depth": 2
		},
		{
			"name": "matplotlib",
			"depth": 2
		},
		{
			"name": "scipy",
			"depth": 2
		},
		{
			"name": "django",
			"depth": 2
		}
	],

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// This setting is deprecated and will be removed in the next release.
	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// This setting is deprecated and will be removed in the next release.
	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter Extension.
	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// This setting is obsolete. Use the 'interactiveWindow.alwaysScrollOnNewCell' setting instead.
	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// Set of commands to put as code lens above a cell.
	"jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// This setting has been deprecated, please use `interactiveWindow.collapseCellInputCode` instead.
	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// This setting is deprecated and will be removed in an upcoming release.
	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, only step through user-written code. Disable this to allow stepping into library code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// Enables Jedi support for extended IntelliSense completions in running Jupyter kernels (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
	"jupyter.enableExtendedKernelCompletions": false,

	// This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// This setting is deprecated and will be removed in the next release.
	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
	"jupyter.excludeUserSitePackages": false,

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
	"jupyter.generateSVGPlots": false,

	// This setting is deprecated and will be removed in the next release.
	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.
	"jupyter.interactiveWindowViewColumn": "secondGroup",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// List of Jupyter Kernels and/or Python environments that are to be excluded from the Kernel picker.
	"jupyter.kernels.filter": [],

	// Enter fully qualified paths to Kernel specification files that are to be trusted. E.g. 'C:\Program Data\Jupyter\kernels\python3\kernel.json'.  
	// **Note**: Kernels can execute code with user privileges. Click [here](https://aka.ms/JupyterTrustedKernelPaths) for further details.
	"jupyter.kernels.trusted": [],

	// This setting is deprecated and will be removed in the next release.
	// Amount of time to wait for guest connections to verify they have the Python Extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at.
	"jupyter.logging.level": "debug",

	// Creates separate output panels for kernels/jupyter server console output
	"jupyter.logKernelOutputSeparately": false,

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// This setting is deprecated and will be removed in the next release.
	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Append a new empty cell to an interactive window file on running the currently last cell.
	"jupyter.newCellOnRunLast": true,

	// Set the root directory for running notebooks and the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.
	"jupyter.pythonCellFolding": true,

	// Characters which trigger auto completion on a python jupyter kernel.
	"jupyter.pythonCompletionTriggerCharacters": ".%'\"",

	// The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
	"jupyter.pythonExportMethod": "direct",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// This setting is deprecated and will be removed in the next release.
	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// This setting is deprecated and will be removed in the next release.
	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// Show the Outline button in the Jupyter notebook toolbar.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// Bring up the Variable View when starting a Run by Line session.
	"jupyter.showVariableViewWhenDebugging": false,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	//  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
	//  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
	"jupyter.widgetScriptSources": [],

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"dev.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"dev.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"dev.containers.defaultExtensions": [],

	// Configures the list of features to always install while creating a container.
	"dev.containers.defaultFeatures": {},

	// Docker Compose executable name or path.
	"dev.containers.dockerComposePath": "docker-compose",

	// Docker (or Podman) executable name or path.
	"dev.containers.dockerPath": "docker",

	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"dev.containers.executeInWSL": false,

	// WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `dev.containers.executeInWSL` is not enabled or on other platforms than Windows.
	"dev.containers.executeInWSLDistro": "",

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"dev.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"dev.containers.logLevel": "debug",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"dev.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"dev.containers.workspaceMountConsistency": "cached",

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Use `dev.containers.cacheVolume` instead.
	// 
	"remote.containers.cacheVolume": null,

	// Use `dev.containers.copyGitConfig` instead.
	// 
	"remote.containers.copyGitConfig": null,

	// Use `dev.containers.defaultExtensions` instead.
	// 
	"remote.containers.defaultExtensions": null,

	// Use `dev.containers.dockerComposePath` instead.
	// 
	"remote.containers.dockerComposePath": null,

	// Use `dev.containers.dockerPath` instead.
	// 
	"remote.containers.dockerPath": null,

	// Use `dotfiles.installCommand` instead.
	// 
	"remote.containers.dotfiles.installCommand": null,

	// Use `dotfiles.repository` instead.
	// 
	"remote.containers.dotfiles.repository": null,

	// Use `dotfiles.targetPath` instead.
	// Deprecated setting. Use 'dotfiles.targetPath' instead.
	"remote.containers.dotfiles.targetPath": null,

	// Use `dev.containers.executeInWSL` instead.
	// 
	"remote.containers.executeInWSL": null,

	// Use `dev.containers.executeInWSLDistro` instead.
	// 
	"remote.containers.executeInWSLDistro": null,

	// Use `dev.containers.gitCredentialHelperConfigLocation` instead.
	// 
	"remote.containers.gitCredentialHelperConfigLocation": null,

	// Use `dev.containers.logLevel` instead.
	// 
	"remote.containers.logLevel": null,

	// Use `dev.containers.repositoryConfigurationPaths` instead.
	// Deprecated setting. Use 'dev.containers.repositoryConfigurationPaths' instead.
	"remote.containers.repositoryConfigurationPaths": null,

	// Use `dev.containers.workspaceMountConsistency` instead.
	// 
	"remote.containers.workspaceMountConsistency": null,

	// Deprecated, please use `remote.SSH.localServerDownload`
	// If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
	"remote.SSH.allowLocalServerDownload": true,

	// The absolute file path to a custom SSH config file.
	"remote.SSH.configFile": "",

	// Specifies the timeout in seconds used for the SSH command that connects to the remote.
	"remote.SSH.connectTimeout": 15,

	// List of extensions that should be installed automatically on all SSH hosts.
	"remote.SSH.defaultExtensions": [],

	// A list of ports to forward when the connection is established.
	"remote.SSH.defaultForwardedPorts": [],

	// Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableAgentForwarding": true,

	// Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
	"remote.SSH.enableDynamicForwarding": true,

	// **Experimental:** Enable using RemoteCommands from ssh config entries. This is only enabled if `remote.SSH.useLocalServer#` is enabled as well and the remote you are trying to connect to is not listed under the `#remote.SSH.remotePlatform` setting.
	"remote.SSH.enableRemoteCommand": false,

	// Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableX11Forwarding": true,

	// **Experimental:** In local server mode (enabled with `remote.SSH.useLocalServer`) Remote - SSH uses SSH_ASKPASS to set VS Code as the application to handle authentication requests; this makes prompts for input show up inside VS Code. However, if you have an external application to handle authentication, such as an YubiKey, you may want to set SSH_ASKPASS to your application instead. If you enable this setting then Remote - SSH won't override your existing SSH_ASKPASS value if one exists.
	"remote.SSH.externalSSH_ASKPASS": false,

	// Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
	//  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
	//  - always: The server will only be downloaded locally and transferred to the host
	//  - off: The server will only be downloaded on the host
	"remote.SSH.localServerDownload": "auto",

	// Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
	"remote.SSH.lockfilesInTmp": false,

	// The log level for the extension.
	"remote.SSH.logLevel": "debug",

	// The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
	"remote.SSH.maxReconnectionAttempts": null,

	// An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
	"remote.SSH.path": "",

	// A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when `remote.SSH.useLocalServer` is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
	"remote.SSH.remotePlatform": {},

	// When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
	"remote.SSH.remoteServerListenOnSocket": false,

	// A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn't in the path you've configured.
	"remote.SSH.serverInstallPath": {},

	// A map of the remote hostname to a range of ports you'd prefer the server to connect to on launch on the remote machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it's expected the first number will be lower than the next.
	"remote.SSH.serverPickPortsFromRange": {},

	// Always reveal the SSH login terminal.
	"remote.SSH.showLoginTerminal": false,

	// Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
	"remote.SSH.suppressWindowsSshWarning": false,

	// Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
	"remote.SSH.useFlock": true,

	// Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
	"remote.SSH.useLocalServer": true,

	// Deprecated: Please use `remote.SSH.remotePlatorm` instead
	// **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
	"remote.SSH.windowsRemotes": [],

	// If set, the output in the WSL log shows debug information.
	"remote.WSL.debug": false,

	// If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// Use `remote.WSL2.connectionMethod` instead.
	// If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
	"remote.WSL.server.connectThroughLocalhost": false,

	// If set, the WSL windows gets the environment from the shell it was opened from.
	"remote.WSL.useShellEnvironment": true,

	// Specifies how the WSL extension will connect to the VS Code server running in WSL1 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though 127.0.0.1 which is beeing shared between Windows and WSL1.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL1.connectionMethod": "localhost",

	// Specifies how the WSL extension will connect to the VS Code server running in WSL2 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though localhost (::1) which is forwarded to the WSL2 VM by Windows.
	//  - wsl2VMAddress: Connects to the server in WSL though the IP address of the WSL2 VM.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL2.connectionMethod": "wslExeProxy",

	// Array of paths to custom kit files
	"cmake.additionalKits": [],

	// Allow the use of JSON extensions such as comments in CMakePresets.json. Please note that your CMakePresets.json file may be considered invalid by other IDEs or on the command line if you use non-standard JSON.
	"cmake.allowCommentsInPresetsFile": false,

	// Enables the use of presets files that are using features from the versions that CMake Tools extension doesn't currently support. Unknown properties and macros will be ignored.
	"cmake.allowUnsupportedPresetsVersions": false,

	// Select active folder automatically.
	"cmake.autoSelectActiveFolder": true,

	// Additional arguments to pass to CMake when building.
	"cmake.buildArgs": [],

	// Build the target before running it.
	"cmake.buildBeforeRun": true,

	// The directory where CMake build files will go.
	"cmake.buildDirectory": "${workspaceFolder}/build",

	// Environment variables to pass to CMake during build.
	"cmake.buildEnvironment": {},

	// Build using tasks.json instead of internal process.
	"cmake.buildTask": false,

	// Additional arguments to pass to the underlying build tool when building.
	"cmake.buildToolArgs": [],

	// 
	"cmake.cacheInit": null,

	// Clear build output before each build.
	"cmake.clearOutputBeforeBuild": true,

	// The protocol used to communicate between the extension and CMake
	"cmake.cmakeCommunicationMode": "automatic",

	// Name/path of the CMake executable to use.
	"cmake.cmakePath": "cmake",

	// Additional arguments to pass to CMake when configuring.
	"cmake.configureArgs": [],

	// Environment variables to pass to CMake during configure.
	"cmake.configureEnvironment": {},

	// Automatically configure CMake project directories when cmake.sourceDirectory or CMakeLists.txt content are saved.
	"cmake.configureOnEdit": true,

	// Automatically configure CMake project directories when they are opened.
	"cmake.configureOnOpen": null,

	// CMake variables to set on the command line.
	"cmake.configureSettings": {},

	// Copy compile_commands.json to this location after a successful configure.
	"cmake.copyCompileCommands": null,

	// The number of parallel test jobs. Use zero to use the value of cmake.parallelJobs.
	"cmake.ctest.parallelJobs": 0,

	// Arguments to pass to CTest.
	"cmake.ctestArgs": [],

	// Arguments passed by default to CTest.
	"cmake.ctestDefaultArgs": [
		"-T",
		"test",
		"--output-on-failure"
	],

	// Path to CTest executable. If null, will be inferred from cmake.cmakePath (recommended to leave null).
	"cmake.ctestPath": null,

	// The debug configuration to use when debugging a target.
	"cmake.debugConfig": {},

	// 
	"cmake.defaultVariants": {
		"buildType": {
			"default": "debug",
			"description": "The build type.",
			"choices": {
				"debug": {
					"short": "Debug",
					"long": "Disable optimizations - include debug information.",
					"buildType": "Debug"
				},
				"release": {
					"short": "Release",
					"long": "Optimize for speed - exclude debug information.",
					"buildType": "Release"
				},
				"minsize": {
					"short": "MinSizeRel",
					"long": "Optimize for smallest binary size - exclude debug information.",
					"buildType": "MinSizeRel"
				},
				"reldeb": {
					"short": "RelWithDebInfo",
					"long": "Optimize for speed - include debug information.",
					"buildType": "RelWithDebInfo"
				}
			}
		}
	},

	// Directories where Emscripten may be installed.
	"cmake.emscriptenSearchDirs": [],

	// Output parsers to use. Supported parsers `cmake`, `gcc`, `gnuld` for GNULD-style linker output, `msvc` for Microsoft Visual C++, `ghs` for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics, and `diab` for the Wind River Diab compiler.
	"cmake.enabledOutputParsers": [
		"cmake",
		"gcc",
		"gnuld",
		"msvc",
		"ghs",
		"diab"
	],

	// Enable trace logging to file and console (very noisy).
	"cmake.enableTraceLogging": false,

	// Environment variables to set when running CMake commands.
	"cmake.environment": {},

	// Enables exporting compile_commands.json.
	"cmake.exportCompileCommandsFile": true,

	// The CMake generator to use.
	"cmake.generator": null,

	// If `true`, the extension will not ask the user to select a CMakeLists.txt file for configuration when one is found in the workspace but not in the root folder.
	"cmake.ignoreCMakeListsMissing": false,

	// Do not use the kit environment variables when running CMake commands.
	"cmake.ignoreKitEnv": false,

	// The directory where CMake installed files will go.
	"cmake.installPrefix": null,

	// Controls what happens with the launch terminal when you launch a target.
	//  - reuseTerminal: The launch terminal instance is reused and the target will launch as soon as the terminal is idle.
	//  - breakAndReuseTerminal: The launch terminal instance is reused and a `break` command is sent to terminate any active foreground process before launching the target.
	//  - newTerminal: A new terminal instance is created and the target is launched in it. Existing terminals are not automatically cleaned up.
	"cmake.launchBehavior": "reuseTerminal",

	// Controls whether the extension reads compile_commands.json to enable single file compilation.
	"cmake.loadCompileCommands": true,

	// 
	"cmake.loggingLevel": "info",

	// Recursively collect and merge all compile_commands.json found in the cmake.buildDirectory.
	"cmake.mergedCompileCommands": null,

	// Directories where MinGW may be installed.
	"cmake.mingwSearchDirs": [],

	// Encoding of the output from external commands (eg.cmake -- build).
	"cmake.outputLogEncoding": "auto",

	// The number of parallel build jobs. Use zero to automatically detect the number of CPUs. Setting this to 1 will disable build parallelism.
	"cmake.parallelJobs": 0,

	// Parse compiler output for warnings and errors.
	"cmake.parseBuildDiagnostics": true,

	// The CMake platform to use when configuring.
	"cmake.platform": null,

	// The preferred CMake generator(s) to use when configuring (tried in order of listing).
	"cmake.preferredGenerators": [],

	// Configures the settings for showing the log and focusing on the output channel.
	//  - focus: The log appears and the output channel takes the cursor focus.
	//  - always: The log appears but the output channel doesn't take the cursor focus.
	//  - never: The log neither appears nor takes the focus.
	"cmake.revealLog": "always",

	// Save open files before building.
	"cmake.saveBeforeBuild": true,

	// Set CMAKE_BUILD_TYPE also on multi config generators
	"cmake.setBuildTypeOnMultiConfig": false,

	// Include system kits in kit selection
	"cmake.showSystemKits": true,

	// Skip over the configure process if cache is present.
	"cmake.skipConfigureIfCachePresent": null,

	// Path or array of paths to the CMakeLists.txt root directory/directories.
	"cmake.sourceDirectory": "${workspaceFolder}",

	// Configures the settings for individual status bar buttons. These settings overwrite the more general 'cmake.statusbar.visibility' setting.
	"cmake.statusbar.advanced": {},

	// Configures how the extension displays the buttons in the status bar.
	"cmake.statusbar.visibility": "default",

	// Environment variables to pass to CTest.
	"cmake.testEnvironment": {},

	// The CMake toolset to use when configuring.
	"cmake.toolset": null,

	// 
	"cmake.touchbar.advanced": {},

	// Configures how the extension displays the buttons on a MacBook Touch Bar
	//  - default: Show Touch Bar buttons on supported systems.
	//  - hidden: Do not show Touch Bar buttons.
	"cmake.touchbar.visibility": "default",

	// Use CMakePresets.json to configure drive CMake configure, build, and test. When using CMakePresets.json, kits, variants, and some settings in settings.json will be ignored.
	"cmake.useCMakePresets": "auto",

	// Controls the auto-completion provider. If `disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": true}` (and similarly for `c` and `cuda-cpp` languages).
	//  - default: Uses the active IntelliSense engine.
	//  - disabled: Uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "default",

	// If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
	"C_Cpp.autocompleteAddParentheses": false,

	// If enabled, code folding ranges are provided by the language server.
	"C_Cpp.codeFolding": "enabled",

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "enabled",

	// The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.databaseFilename": "",

	// The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
	"C_Cpp.default.compileCommands": "",

	// The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerArgs": [],

	// The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
	"C_Cpp.default.configurationProvider": "",

	// The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cppStandard": "",

	// The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cStandard": "",

	// The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
	"C_Cpp.default.customConfigurationVariables": null,

	// The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
	"C_Cpp.default.defines": [],

	// The value to use in a configuration if `dotConfig` is not specified, or the value to insert if `${default}` is present in `dotConfig`.
	"C_Cpp.default.dotConfig": null,

	// Controls whether the extension will report errors detected in `c_cpp_properties.json`.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
	"C_Cpp.default.forcedInclude": [],

	// The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
	"C_Cpp.default.includePath": [],

	// The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
	"C_Cpp.default.intelliSenseMode": "",

	// The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
	"C_Cpp.default.macFrameworkPath": [],

	// Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
	"C_Cpp.default.mergeConfigurations": false,

	// The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
	"C_Cpp.default.systemIncludePath": [],

	// Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
	"C_Cpp.default.windowsSdkVersion": "",

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `default`.
	"C_Cpp.enhancedColorization": "enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "enabledIfIncludesResolve",

	// Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	//  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
	//  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true,
		"**/.vs": true
	},

	// If disabled, hover details are no longer provided by the language server.
	"C_Cpp.hover": "default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Display inlay hints for deduced type when `auto` is used in a declaration:
	// ```cpp 
	// 
	//  auto index /* : int */ = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,

	// Display inlay hints for deduced type when `auto` is used in a declaration on the left of the identifier:
	// ```cpp 
	// 
	//  auto /* int */ index = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,

	// Display inlay hints for parameter names:
	// ```cpp 
	// 
	//  int a = getArea(/* width: */ x, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.enabled": false,

	// Hide leading `_` in parameter name hints.
	"C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,

	// Suppress parameter name hints when the argument text or inline comment contains the parameter name:
	// ```cpp 
	// 
	//  int a = getArea(width, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,

	// Display the inlay hint reference operator `&` for parameters passed by non-const reference:
	// ```cpp 
	// 
	//  swap(/* &first: */ str1, /* &last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.enabled": false,

	// Controls whether a space is shown after `&` for parameters passed by non-const reference:
	// ```cpp 
	// 
	//  swap(/* & first: */ str1, /* & last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.showSpace": false,

	// Controls the IntelliSense provider.
	//  - default: Provides context-aware results via a separate IntelliSense process.
	//  - Tag Parser: Provides "fuzzy" results that are not context-aware.
	//  - disabled: Turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.
	"C_Cpp.intelliSenseEngineFallback": "disabled",

	// Controls the delay in milliseconds before IntelliSense starts updating after a modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// Enable pre-v1.10.0 behavior for how shell escaping is handled in compiler arg settings. Shell escaping is no longer expected or supported by default in arg arrays starting in v1.10.0.
	"C_Cpp.legacyCompilerArgsBehavior": false,

	// If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If `true`, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
	"C_Cpp.workspaceSymbols": "Just My Code",

	// Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
	"C_Cpp.clang_format_path": "",

	// If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory, or use `file:<path>/.clang-format` to reference a specific path. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_style": "file",

	// Configures the formatting engine.
	//  - clangFormat: `clang-format` will be used to format code.
	//  - vcFormat: The Visual C++ formatting engine will be used to format code.
	//  - default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
	//  - disabled: Code formatting will be disabled.
	"C_Cpp.formatting": "default",

	// Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Braces are indented by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.braces": false,

	// Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// The position of goto labels.
	//  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Position goto labels at the leftmost edge of the code.
	//  - none: Goto labels will not be formatted.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Determines what new line indentation is relative to.
	//  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
	//  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
	//  - statementBegin: Indent new line relative to the beginning of the current statement.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// The position of preprocessor directives.
	//  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
	//  - none: Preprocessor directives will not be formatted.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// Indentation of comments is not changed during formatting operations.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// In existing code, preserve the existing indent alignment of new lines within parentheses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: New line is aligned under the opening parenthesis.
	//  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Place `catch` and similar keywords on a new line.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Place `else` on a new line.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// The position of opening braces for control blocks.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// The position of opening braces for functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// The position of opening braces for lambda functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// The position of opening braces for namespaces.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// The position of opening braces for type definitions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Place `while` in a `do`-`while` loop on a new line.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// For empty function bodies, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// For empty types, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Place opening and closing braces for scopes on separate lines.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// A space is added after the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// A space is added after every comma.
	"C_Cpp.vcFormat.space.afterComma": true,

	// A space is added between the keyword and opening parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Spaces around assignment operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Spaces around binary operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Spaces around conditional operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// A space is added before the opening braces of scope blocks.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// A space is added before every comma.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// A space is added before the colon in constructor definitions.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// When square brackets are empty, a space is added before the opening bracket.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Spacing between function names and opening parentheses of argument lists.
	//  - insert: Add a space before the opening parenthesis of a function.
	//  - remove: Spaces before opening parenthesis of a function are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// A space is added before the colon for inherited types in class definitions.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// A space is added before the opening brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// A space is added before the opening parenthesis of lambda argument lists.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// A space is added before opening square brackets.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// When braces are empty and on the same line, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// When a function parameter list is empty, a space is inserted between its parentheses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// A space is inserted after every semicolon.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Spaces around pointer and reference operators.
	//  - left: Pointer and reference operators are aligned to the left.
	//  - center: Pointer and reference operators are centered.
	//  - right: Pointer and reference operators are aligned to the right.
	//  - ignore: Pointer and reference operators are not formatted.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Spaces around commas are preserved inside uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Spaces between unary operators and operands are removed.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Spaces are removed before every semicolon.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Wrapping options for blocks.
	//  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// The string of characters used as the starting line of the Doxygen comment.
	"C_Cpp.doxygen.generatedStyle": "///",

	// Controls whether to automatically insert the Doxygen comment after typing the chosen comment style.
	"C_Cpp.doxygen.generateOnType": true,

	// Select the Doxygen section tags that you would like to appear on hover in the tooltip area when the 'Simplify Structured Comments' setting is enabled. 
	"C_Cpp.doxygen.sectionTags": [
		"attention",
		"tparam",
		"param",
		"result",
		"returns",
		"retval",
		"exception",
		"deprecated",
		"warning",
		"note"
	],

	// If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
	"C_Cpp.simplifyStructuredComments": true,

	// Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.
	"C_Cpp.codeAnalysis.clangTidy.args": [],

	// List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any.
	"C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],

	// List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.
	"C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],

	// If `true`, formatting will be run on the lines changed by 'Fix' code actions.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,

	// Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.
	//  - None: Show no 'Clear' code actions.
	//  - AllOnly: Show only the 'Clear all' code action (or 'Clear all <type>' if there is only one type or 'Clear this' if there is only one problem).
	//  - AllAndAllType: Show the 'Clear all' code action (if there are multiple problem types) and the 'Clear all <type>' code action (or 'Clear this' if there is only one problem for the <type>)
	//  - AllAndAllTypeAndThis: Show the 'Clear all' (if there are multiple problem types), 'Clear all <type>' (if there are multiple problems for the <type>), and 'Clear this' code actions
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",

	// If `true`, the 'Disable' code action will be shown when available (the next time code analysis is run). When the 'Disable' code action is used, it adds the warning code to the `C_Cpp.codeAnalysis.clangTidy.checks.disabled` setting.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,

	// If `true`, the 'Show Documentation for' code action will be shown when available (the next time code analysis is run).
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,

	// Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.
	"C_Cpp.codeAnalysis.clangTidy.config": "",

	// If `true`, code analysis using `clang-tidy` will be enabled and run automatically if `C_Cpp.codeAnalysis.runAutomatically` is `true` (the default).
	"C_Cpp.codeAnalysis.clangTidy.enabled": false,

	// Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `C_Cpp.codeAnalysis.clangTidy.config` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.
	"C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",

	// A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.
	"C_Cpp.codeAnalysis.clangTidy.headerFilter": null,

	// The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.
	"C_Cpp.codeAnalysis.clangTidy.path": "",

	// If `true` and `compileCommands` is set, the `-p=<build-path>` argument is passed to `clang-tidy` instead of build arguments being passed after `--`. This may not work if environment variables aren't set so that system includes can be found.
	"C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,

	// Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `files.exclude#` and `#C_Cpp.files.exclude`. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.codeAnalysis.exclude": {},

	// The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.codeAnalysis.maxConcurrentThreads": null,

	// Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.codeAnalysis.maxMemory": null,

	// If `true`, code analysis will run automatically on a file after it is opened or saved.
	"C_Cpp.codeAnalysis.runAutomatically": true,

	// Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically` is `true`.
	"C_Cpp.codeAnalysis.updateDelay": 2000,

	// If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// Show the "Run and Debug" play button and "Add Debug Configuration" gear in the editor title bar for C++ files.
	"C_Cpp.debugShortcut": true,

	// Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.
	"C_Cpp.sshTargetsView": "default",

	// The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.intelliSense.maxCachedProcesses": null,

	// Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.intelliSense.maxMemory": null,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": "",

	// Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.
	"C_Cpp.maxCachedProcesses": null,

	// The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.
	"C_Cpp.maxConcurrentThreads": null,

	// The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.
	"C_Cpp.maxMemory": null,

	// The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.references.maxCachedProcesses": 0,

	// The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.references.maxConcurrentThreads": null,

	// Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.references.maxMemory": null,

	// Add include paths from `nan` and `node-addon-api` when they are dependencies.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// If set to `default`, the file system of the workspace is assumed to be case insensitive on Windows and case sensitive on macOS or Linux. If set to `enabled`, the file system of the workspace is assumed to be case sensitive on Windows.
	"C_Cpp.caseSensitiveFileSupport": "default",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "disabled",

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
	"C_Cpp.loggingLevel": "Error",

	// The character used as a path separator for `#include` auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// This setting is deprecated. Pre-release extensions are now available via the Marketplace.
	// Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Default",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Specifies the order in which to display folders under Remote targets in the Remote Explorer.
	//  - most recently used: Display folders in order of the most recently opened at the top
	//  - alphabetical: Display folders in alphabetical order
	"remote-explorer.foldersSortOrder": "most recently used",

	// Enables various accessibility features, such as audio cues about what is happening in the session.
	"liveshare.accessibility.accessibilityFeaturesEnabled": "auto",

	// Output device to play audio in accessibility mode.
	"liveshare.accessibility.outputDevice": "Default",

	// Enables sound effects about activity.
	"liveshare.accessibility.soundsEnabled": true,

	// Controls the volume of sound audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.soundVolume": 100,

	// Controls the rate of speech in accessibility mode.
	"liveshare.accessibility.speechRate": 2,

	// The voice used for speech in accessibility mode.
	"liveshare.accessibility.voice": "en-US-Jenny",

	// Enables spoken announcements about activity.
	"liveshare.accessibility.voiceEnabled": true,

	// Controls the volume of voice audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.voiceVolume": 100,

	// Allow guests to start and stop debugging sessions.
	"liveshare.allowGuestDebugControl": false,

	// Allow guests to run and terminate workspace tasks.
	"liveshare.allowGuestTaskControl": false,

	// Specifies who to allow session invitations from.
	"liveshare.allowInvites": "contacts",

	// Ensures that the session's host is always followed.
	"liveshare.alwaysFollowHost": false,

	// Controls how to handle join requests from anonymous guests.
	"liveshare.anonymousGuestApproval": "prompt",

	// Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
	"liveshare.autoShareServers": true,

	// Controls whether terminals are automatically shared with guests (read-only).
	"liveshare.autoShareTerminals": true,

	// Controls whether to show the CodeLens for starting a collaboration session.
	"liveshare.codeLens": true,

	// Controls whether to allow comments in collaboration sessions
	"liveshare.comments": true,

	// Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
	"liveshare.connectionMode": "auto",

	// Enables the Visual Studio Live Share output channel.
	"liveshare.diagnosticLogging": false,

	// Specifies the level of logging output from Visual Studio Live Share Extension
	"liveshare.diagnosticLoggingLevel": "Warning",

	// Enables diagnostic notifications and logs.
	"liveshare.diagnosticMode": false,

	// Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
	"liveshare.featureSet": "stable",

	// Specifies how to respond to focus requests from other participants.
	"liveshare.focusBehavior": "accept",

	// Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
	"liveshare.guestApprovalRequired": false,

	// Increases the guest limit from 5 to 30.
	"liveshare.increasedGuestLimit": true,

	// Controls how the participant will join incoming shared debug sessions.
	"liveshare.joinDebugSessionOption": "Automatic",

	// Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
	"liveshare.keepAliveInterval": 20,

	// Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
	"liveshare.languages.allowGuestCommandControl": false,

	// Specifies the client to launch when clicking on a Live Share URL.
	"liveshare.launcherClient": "web",

	// Controls when to display a participant's name tag instead of just their cursor.
	"liveshare.nameTagVisibility": "Activity",

	// Allow guests to run notebook cells
	"liveshare.notebooks.allowGuestExecuteCells": false,

	// Controls whether to automatically open shared servers in your default browser.
	"liveshare.openSharedServers": true,

	// Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
	"liveshare.populateGitCoAuthors": "always",

	// Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
	"liveshare.presence": false,

	// Controls whether to publish your current workspace folder to other users
	"liveshare.publishWorkspaceInfo": false,

	// Height of shared terminal window, characters.
	"liveshare.sharedTerminalHeight": 50,

	// Width of shared terminal window, characters.
	"liveshare.sharedTerminalWidth": 120,

	// Automatically share external files opened by the host during a collaboration session.
	"liveshare.shareExternalFiles": true,

	// Show or hide the Live Share status bar items.
	"liveshare.showInStatusBar": "always",

	// Controls visibility of the cursor and highlights for read-only users.
	"liveshare.showReadOnlyUsersInEditor": "whileFollowing",

	// Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
	"liveshare.showVerboseNotifications": true,

	// Controls how to respond when an audio call is started.
	"liveshare.audio.joinCallBehavior": "prompt",

	// Controls whether to automatically start an audio call whenever you share.
	"liveshare.audio.startCallOnShare": false,

	// Selects the type of account to use for authentication.
	"codespaces.accountProvider": "Uninitialized",

	// Default extensions to install in VS Codespaces
	"codespaces.defaultExtensions": [
		"ms-vsonline.vsonline",
		"GitHub.vscode-pull-request-github",
		"ms-vsliveshare.vsliveshare",
		"visualstudioexptteam.vscodeintellicode"
	],

	// Enables recursive submodule cloning for git repositories
	"codespaces.enableSubmoduleCloning": false,

	// Enables suspending Codespace if the connection is idle for configured auto-suspend time. Only applies when `codespaces.accountProvider` is set to `Microsoft`.
	"codespaces.enableSuspendOnIdleConnection": true,

	// Controls the set of active features. Only applies when `codespaces.accountProvider` is set to `Microsoft`.
	"codespaces.featureSet": "default",

	// Visual Studio Codespaces Plan filter. Each item is a fully-qualified Plan resource ID. Only applies when `codespaces.accountProvider` is set to `Microsoft`.
	"codespaces.planFilter": null,

	// Auto Run `Curl` request after import. If disabled, the `Curl` request will not be executed after import
	"thunder-client.autoRunCurl": true,

	// List of ssl certificates for hosts
	"thunder-client.certificates": [],

	// Automatically send `Content-Type` header when body is sent in request, If disabled, the `Content-Type` header will not be sent
	"thunder-client.contentType": true,

	// Enter full folder path to store requests data, `Suitable for storing all requests data in one fixed location`. Also supports home folder `$HOME/path`. for more details [visit here](https://github.com/rangav/thunder-client-support#team)
	"thunder-client.customLocation": "",

	// Please enter Http Methods separated by comma e.g: `search,subscribe`. Close and Re-open Review View to see changes.
	"thunder-client.customMethods": "",

	// Please provide Default Url of the Request
	"thunder-client.defaultUrl": "",

	// Thunder Client editor font size 
	//  - Use 0 to use default font size.
	//  - Use any other value to set custom font size.
	"thunder-client.editorFontSize": 0,

	// Comma separated Host names to exclude from proxy e.g: `abc.com,xyz.com`
	"thunder-client.excludeProxyHostList": "",

	// Follow Redirects when running Requests
	"thunder-client.followRedirects": true,

	// The http library to use to make api requests, default is `got`.
	"thunder-client.httpLibrary": "got",

	// Http Version for making the request, default is HTTP/1.1
	"thunder-client.httpVersion": "HTTP/1.1",

	// Json format indentation, select 2 or 4 spaces, default is 2 spaces
	"thunder-client.indentSize": 2,

	// Preview features can be tested by enabling this option.
	"thunder-client.previewFeatures": false,

	// Select the request view layout for `request/response` sections. Please `close` request tab and `re-open` to apply new layout
	"thunder-client.requestLayout": "Left/Right",

	// Request Timeout in milliseconds, 0 means no timeout
	"thunder-client.requestTimeout": 0,

	// Response Display Limit in MB, Default is 2MB
	"thunder-client.responseLimit": 2,

	// `Save Request` when Send button is clicked in Collections. If disabled, the request will be sent without saving. Use shortcut `ctrl/cmd + s` to save the request explicitly
	"thunder-client.saveRequestOnSend": true,

	// Save OAuth 2 token based on environment, So this will allow to save `different access tokens` for `dev & prod` environments
	"thunder-client.saveTokenPerEnvironment": false,

	// Requests data will be saved and loaded automatically from current workspace folder, `Suitable for Teams with multiple projects`. The tests folder `thunder-tests` will be created at the root. for more details [visit here](https://github.com/rangav/thunder-client-support#team)
	"thunder-client.saveToWorkspace": false,

	// Delete Collection OR Environment without prompt for delete confirmation. Use this only when you have issue with standard delete
	"thunder-client.sidebar.deleteWithoutPrompt": false,

	// Hide `Sidebar date modified` section in the requests
	"thunder-client.sidebar.hideDateModified": false,

	// Show Requests executed from collection in `Activity Tab`
	"thunder-client.sidebar.showActivityFromCollection": false,

	// Sidebar Collections tree indentation, `select 0` for default padding, `select 5 or 10` to add extra 5px or 10px padding
	"thunder-client.sidebar.treeIndentation": 0,

	// Relative path to the current workspace folder, where you like to save tests data, `Save To Workspace` setting needs to be enabled first. The tests folder `thunder-tests` will be created here. for more details [visit here](https://github.com/rangav/thunder-client-support#team)
	"thunder-client.workspaceRelativePath": "",

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// The list of clean ups to be run on the current document when it's saved. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
	"java.cleanup.actionsOnSave": [],

	// Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
	"java.codeAction.sortMembers.avoidVolatileChanges": true,

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Specify how to enable the annotation-based null analysis.
	"java.compile.nullAnalysis.mode": "interactive",

	// Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnull": [
		"javax.annotation.Nonnull",
		"org.eclipse.jdt.annotation.NonNull",
		"org.springframework.lang.NonNull"
	],

	// Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nullable": [
		"javax.annotation.Nullable",
		"org.eclipse.jdt.annotation.Nullable",
		"org.springframework.lang.Nullable"
	],

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": true,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
	"java.completion.importOrder": [
		"#",
		"java",
		"javax",
		"org",
		"com",
		""
	],

	// Specify whether to match case for code completion.
	//  - auto: Only match case for the first letter when using Visual Studio Code - Insiders.
	//  - firstLetter: Match case for the first letter when doing completion.
	//  - off: Do not match case when doing completion.
	"java.completion.matchCase": "auto",

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
	"java.completion.postfix.enabled": true,

	// Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": false,

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
	"java.configuration.workspaceCacheLimit": 90,

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
	"java.import.generatesMetadataFilesAtProjectRoot": false,

	// Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
	"java.import.gradle.annotationProcessing.enabled": true,

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Enable/disable the Maven offline mode.
	"java.import.maven.offline.enabled": false,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Enable/disable inlay hints for parameter names:
	// ```java
	// 
	// Integer.valueOf(/* s: */ '123', /* radix: */ 10)
	//  
	// ```
	//  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
	//  - none: Disable parameter name hints
	//  - literals: Enable parameter name hints only for literal arguments
	//  - all: Enable parameter name hints for literal and non-literal arguments
	"java.inlayHints.parameterNames.enabled": "literals",

	// The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
	//  - `java.lang.Math.*` - All the methods from java.lang.Math.
	//  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
	//  - `*.println(*)` - Methods named as 'println'.
	//  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
	//  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
	"java.inlayHints.parameterNames.exclusions": [],

	// [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
	// 
	// **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
	"java.jdt.ls.androidSupport.enabled": "auto",

	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
	// 
	// On Windows, backslashes must be escaped, i.e.
	// "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.jdt.ls.java.home": null,

	// Whether to load lombok processors from project classpath
	"java.jdt.ls.lombokSupport.enabled": true,

	// Specify whether to automatically add Protobuf output source directories to the classpath.
	// 
	// **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
	"java.jdt.ls.protobufSupport.enabled": true,

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable",

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Project encoding settings
	//  - ignore: Ignore project encoding settings
	//  - warning: Show warning if a project has no explicit encoding set
	//  - setDefault: Set the default workspace encoding settings
	"java.project.encoding": "ignore",

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named 'node_modules' or '.git'. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
	"java.project.resourceFilters": [
		"node_modules",
		"\\.git"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Show quickfixes at the problem or line level.
	"java.quickfix.showAt": "line",

	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
	"java.sharedIndexes.enabled": "auto",

	// Specifies a common index location for all workspaces. See default values as follows:
	//  
	// Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
	//  
	// macOS: `"~/Library/Caches/.jdt/index"`
	//  
	// Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
	"java.sharedIndexes.location": "",

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// Enable/disable to show the description in signature help.
	"java.signatureHelp.description.enabled": false,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": true,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Use local IP as host
	"liveServer.settings.useLocalIp": false,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Extra properties that could be passed to the code analyzers. Only for advanced use cases.
	"sonarlint.analyzerProperties": {},

	// In connected mode, SonarLint applies the SonarQube quality profile to the local analysis and synchronizes the issue status and other analysis settings. Please find the documentation [here](https://github.com/SonarSource/sonarlint-vscode/wiki/Connected-Mode)
	"sonarlint.connectedMode.connections.sonarcloud": [],

	// In connected mode, SonarLint applies the SonarQube quality profile to the local analysis and synchronizes the issue status and other analysis settings. Please find the documentation [here](https://github.com/SonarSource/sonarlint-vscode/wiki/Connected-Mode)
	"sonarlint.connectedMode.connections.sonarqube": [],

	// Bind the current workspace folder to a [SonarQube](https://sonarqube.org) or [SonarCloud](https://sonarcloud.io) project. Requires connection details to be defined in the setting `sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud`.
	// 
	// Binding a workspace folder to a project allows to use the same rules and configuration that are defined in the server, as well as issue suppressions.
	// 
	// Example:
	// 
	//     "sonarlint.connectedMode.project": {
	//       "projectKey": "my_project"
	//     }
	// 
	// Specify the `connectionId` only if you have defined multiple connections.
	"sonarlint.connectedMode.project": {},

	// The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.
	// Configure one or more connection(s) to SonarQube/SonarCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `sonarlint.connectedMode.project`.
	// 
	// Example for SonarCloud:
	// 
	//     "sonarlint.connectedMode.servers": [
	//       {
	//         "serverId": "my_orga_in_sonarcloud.io",
	//         "serverUrl": "https://sonarcloud.io",
	//         "organizationKey": "my_organization",
	//         "token": "V2VkIE1..."
	//       }
	//     ]
	// 
	// Example for SonarQube:
	// 
	//     "sonarlint.connectedMode.servers": [
	//       {
	//         "serverId": "my_sonarqube",
	//         "serverUrl": "https://sonar.mycompany.com",
	//         "token": "V2VkIE1..."
	//       }
	//     ]
	"sonarlint.connectedMode.servers": [],

	// Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.
	"sonarlint.disableTelemetry": false,

	// Path to a Java Runtime Environment (11 or more recent) used to launch the SonarLint Language Server.
	// * On Windows, backslashes must be escaped, e.g. `C:\\Program Files\\Java\\jdk-11.0.12+7` 
	// * On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/jdk-11.0.12+7.jdk/Contents/Home`
	"sonarlint.ls.javaHome": "",

	// Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`
	"sonarlint.ls.vmargs": "",

	// Show analyzer's logs in the SonarLint output.
	"sonarlint.output.showAnalyzerLogs": false,

	// Enable verbose log level in the SonarLint output.
	"sonarlint.output.showVerboseLogs": false,

	// Path to the active compilation database, e.g. `C:\\Repos\\MyProject\\compile_commands.json`
	"sonarlint.pathToCompileCommands": "",

	// Path to a Node.js executable (14.17.0 or more recent) used to analyze JavaScript and TypeScript code. 
	// On Windows, backslashes must be escaped, e.g. `C:\\Program Files\\NodeJS\\14-lts\\bin\\node.exe`
	"sonarlint.pathToNodeExecutable": "",

	// Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. See _SonarLint Rules_ view for the full list of available rules. In connected mode, this configuration is overridden by the projects's quality profile, as configured on server side.
	// 
	// Example:
	// 
	//     "sonarlint.rules": {
	//         "javascript:1481": {
	//             "level": "off",
	//         "javascript:S103": {
	//             "level": "on",
	//             "parameters": {
	//                 "maximumLineLength": "120"
	//             }
	//         }
	//     }
	// 
	"sonarlint.rules": {},

	// Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files. Example: `{**/test/**,**/*test*,**/*Test*}`
	"sonarlint.testFilePattern": "",

	// Traces the communication between VS Code and the SonarLint language server.
	"sonarlint.trace.server": "off",

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// Logging level for console
	"intellicodeApiExamples.loggingLevel": "INFO",

	// Enable API Usage Examples for Python files
	"intellicodeApiExamples.python.enabled": true,

	// Enable API Usage Examples for Typescript/Javascript files
	"intellicodeApiExamples.typescript.enabled": true,

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",

	// Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.
	"java.debug.settings.jdwp.async": "auto",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Synchronize Java Projects explorer selection with folder explorer
	"java.dependency.syncWithFolderExplorer": true,

	// The output path of the exported jar. Leave it empty if you want to manually pick the output location.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Whether to send back detailed information from error logs for diagnostic purpose.
	"java.help.collectErrorLog": false,

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Beginner Tips page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests.
	"java.test.config": {},

	// Specify the name of the default test configuration.
	"java.test.defaultConfig": "",

	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Format of project node name shown in Maven explorer.
	"maven.explorer.projectName": "${project.name}",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

	// A path to a file, or an object containing the configuration options for js-beautify, if the .jsbeautifyrc file exists in project root, it overrides this configuration.
	"compile-hero.config": null,

	// Disable compile files on did save code.
	"compile-hero.disable-compile-files-on-did-save-code": true,

	// Enable to generate minified css (*.min.css) files.
	"compile-hero.generate-minified-css": false,

	// Enable to generate only minified css (*.min.css) files.
	"compile-hero.generate-minified-css-only": false,

	// Enable to generate minified html (*.min.html) files.
	"compile-hero.generate-minified-html": false,

	// Enable to generate only minified html (*.min.html) files.
	"compile-hero.generate-minified-html-only": false,

	// Enable to generate minified javascript (*.dev.js) files.
	"compile-hero.generate-minified-javascript": false,

	// Enable to generate only minified javascript (*.dev.js) files.
	"compile-hero.generate-minified-javascript-only": false,

	// List of paths to ignore when using format or compile command, including format or compile on save, uses glob pattern matching.
	"compile-hero.ignore": [],

	// Set the directory to output after compiling jade.
	"compile-hero.jade-output-directory": "./dist",

	// Switch to control the compilation of jade.
	"compile-hero.jade-output-toggle": true,

	// Set the directory to output after compiling javascript.
	"compile-hero.javascript-output-directory": "./dist",

	// Switch to control the compilation of javascript.
	"compile-hero.javascript-output-toggle": true,

	// Link file types to the beautifier type.
	"compile-hero.language": {
		"js": {
			"type": [
				"javascript",
				"json",
				"jsonc"
			],
			"filename": [
				".jshintrc",
				".jsbeautifyrc"
			]
		},
		"css": [
			"css",
			"less",
			"scss"
		],
		"html": [
			"htm",
			"html"
		]
	},

	// Set the directory to output after compiling less.
	"compile-hero.less-output-directory": "./dist",

	// Switch to control the compilation of less.
	"compile-hero.less-output-toggle": true,

	// Switch to control the notification.
	"compile-hero.notification-toggle": true,

	// Set the directory to output after compiling pug.
	"compile-hero.pug-output-directory": "./dist",

	// Switch to control the compilation of pug.
	"compile-hero.pug-output-toggle": true,

	// Set the directory to output after compiling sass.
	"compile-hero.sass-output-directory": "./dist",

	// Switch to control the compilation of sass.
	"compile-hero.sass-output-toggle": true,

	// Set the directory to output after compiling sass.
	"compile-hero.scss-output-directory": "./dist",

	// Switch to control the compilation of sass.
	"compile-hero.scss-output-toggle": true,

	// Set the directory to output after compiling stylus.
	"compile-hero.stylus-output-directory": "./dist",

	// Switch to control the compilation of stylus.
	"compile-hero.stylus-output-toggle": true,

	// Set the directory to output after compiling typescript.
	"compile-hero.typescript-output-directory": "./dist",

	// Switch to control the compilation of typescript.
	"compile-hero.typescript-output-toggle": true,

	// Set the directory to output after compiling typescriptx.
	"compile-hero.typescriptx-output-directory": "./dist",

	// Switch to control the compilation of typescriptx.
	"compile-hero.typescriptx-output-toggle": true,

	// List of paths to watch when using format or compile command, including format or compile on save, uses glob pattern matching.
	"compile-hero.watch": [],

	// A list of CSS based languages where suggestions are enabled.
	"html-css-class-completion.CSSLanguages": [
		"css",
		"sass",
		"scss"
	],

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",

	// A list of HTML based languages where suggestions are enabled.
	"html-css-class-completion.HTMLLanguages": [
		"html",
		"vue",
		"razor",
		"blade",
		"handlebars",
		"twig",
		"django-html",
		"php",
		"markdown",
		"erb",
		"ejs",
		"svelte"
	],

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

	// A list of JavaScript based languages where suggestions are enabled.
	"html-css-class-completion.JavaScriptLanguages": [
		"javascript",
		"javascriptreact",
		"typescriptreact"
	],

}